{
  "name" : "Sequence Tagging with CRFs",
  "cells" : [ {
    "id" : 0,
    "compiler" : "scala",
    "input" : {
      "sessionId" : null,
      "code" : "import ml.wolfe.examples.TaggingExample._\n\nval doc = TokenSplitter(SentenceSplitter(\n\"John Denver is a Songwriter. Denver has produced many records\"))\nval example = doc.tokens.map(_.word)\n\nval words = example.distinct\nval tags = Seq('O, 'B_LOC, 'I_LOC, 'B_PER, 'I_PER)\n\nBratRenderer.bratIE(doc)",
      "extraFields" : { },
      "outputFormat" : ""
    }
  }, {
    "id" : 2,
    "compiler" : "scala",
    "input" : {
      "sessionId" : null,
      "code" : "// Define the domains or inputs, outputs and parameters\nval maxLength = 15\nimplicit val Words = words.toDom withOOV \"[OOV]\"\nimplicit val Tags = tags.toDom\nimplicit val Y = Seqs(Tags, 0, maxLength)\nimplicit val Weights = Vectors(dim = 1000)\n\nimplicit val index = new SimpleIndex() // For indexing Weights vectors",
      "extraFields" : { },
      "outputFormat" : ""
    }
  }, {
    "id" : 3,
    "compiler" : "scala",
    "input" : {
      "sessionId" : null,
      "code" : "// Define a score function\n\nval firstName = Set(\"John\", \"Jack\")\nval lastName = Set(\"Denver\")\nval location = Set(\"Denver\", \"Dallas\")\nval punct     = Set(\",\", \".\", \"?\", \";\")\ndef lowercase(w: Words.Value) = w.head.isLower\n\ndef model(w: Weights.Term, x: Seq[Words.Value])(y: Y.Term) = {\n    sum(0 until x.length) { i => \n        (w dot feature('bias, y(i))) +\n        (w dot feature('word, y(i) -> x(i).toConst)) +\n        (w dot feature('firstName, I(firstName(x(i)).toConst), y(i))) +\n        (w dot feature('lastName, I(lastName(x(i)).toConst), y(i))) +\n        (w dot feature('location, I(location(x(i)).toConst), y(i)))\n    } + sum(0 until x.length - 1) { i => \n        w dot feature('pair, y(i) -> y(i + 1))\n    }\n} subjectTo (y.length === x.length) // Require one tag per word\n\nval wStar = preloadWeights()\n\n// An tag sequence that is too long for the example\nval longSequence = IndexedSeq.fill(100)('O)\nmodel(Weights.Const(wStar), example)(Y.Const(longSequence)).eval()",
      "extraFields" : { },
      "outputFormat" : ""
    }
  }, {
    "id" : 4,
    "compiler" : "scala",
    "input" : {
      "sessionId" : null,
      "code" : "// A tag sequence of the correct length\nval betterSequence = IndexedSeq.fill(11)('O)\nmodel(Weights.Const(wStar), example)(Y.Const(betterSequence)).eval()",
      "extraFields" : { },
      "outputFormat" : ""
    }
  }, {
    "id" : 5,
    "compiler" : "scala",
    "input" : {
      "sessionId" : null,
      "code" : "// Find the optimal tag sequence for this example, by maxProduct\nimplicit val maxProductParams = MaxProductParameters(iterations = 1)\n\ndef predict(x: Seq[Words.Value]) = argmax(Y) {\n    model(Weights.Const(wStar), x)\n} by maxProduct\nval result = predict(example).evalResult()\n(doc withTags result).toTaggedText",
      "extraFields" : { },
      "outputFormat" : ""
    }
  }, {
    "id" : 6,
    "compiler" : "scala",
    "input" : {
      "sessionId" : null,
      "code" : "// The factor graph which was used to perform inference\nresult.factorGraphs.head",
      "extraFields" : { },
      "outputFormat" : ""
    }
  }, {
    "id" : 7,
    "compiler" : "scala",
    "input" : {
      "sessionId" : null,
      "code" : "// Build a new model with factors between matching words\ndef matchingPairs(x: Seq[Words.Value]) =\n    for (j <- 0 until x.length; i <- 0 until j; if x(i) != \".\" && x(i) == x(j)) yield (i, j)\n    \ndef skipModel(w: Weights.Term,x: Seq[Words.Value])(y: Y.Term) = {\n    def matches = matchingPairs(x)\n    model(w,x)(y) + \n    sum(0 until matches.length) { i => \n        w dot feature('match, y(matches(i)._1) -> y(matches(i)._2))\n    }\n}\n\ndef predict2(x: Seq[Words.Value]) = argmax(Y) {\n    skipModel(Weights.Const(wStar), x)\n} by maxProduct\n\nval result2 = predict2(example).evalResult()\n(doc withTags result2).toTaggedText",
      "extraFields" : { },
      "outputFormat" : ""
    }
  }, {
    "id" : 8,
    "compiler" : "scala",
    "input" : {
      "sessionId" : null,
      "code" : "result2.factorGraphs.head",
      "extraFields" : { },
      "outputFormat" : ""
    }
  } ],
  "config" : { }
}
