{
  "name" : "Denoising using Ising Grid",
  "cells" : [ {
    "id" : 0,
    "compiler" : "section",
    "input" : {
      "code" : "data",
      "outputFormat" : "html",
      "extraFields" : { }
    }
  }, {
    "id" : 1,
    "compiler" : "markdown",
    "input" : {
      "code" : "## Data\n\nLet's start with an image:",
      "outputFormat" : "html",
      "extraFields" : { }
    }
  }, {
    "id" : 2,
    "compiler" : "imageurl",
    "input" : {
      "code" : "http://www.vectortemplates.com/raster/batman-logo.gif",
      "outputFormat" : "html",
      "extraFields" : {
        "showEditor" : "true"
      }
    }
  }, {
    "id" : 3,
    "compiler" : "section",
    "input" : {
      "code" : "noisy",
      "outputFormat" : "html",
      "extraFields" : { }
    }
  }, {
    "id" : 4,
    "compiler" : "markdown",
    "input" : {
      "code" : "## Adding Noise\n\nNow in Scala, we let's read in the image, and then add some noise to it.",
      "outputFormat" : "html",
      "extraFields" : { }
    }
  }, {
    "id" : 5,
    "compiler" : "wolfe",
    "input" : {
      "code" : "type Image = Map[(Int, Int), Boolean]\n\n// image loading code\nval img = imageURLToMatrix(\"http://www.vectortemplates.com/raster/batman-logo.gif\")\ndef rows = (0 until img.data.length)\ndef cols = (0 until img.data.head.length)\ndef pixels = (0 until rows.length) x (0 until cols.length)\ndef img2HTML(img:Image) = Matrix(rows map (i => cols map(j => img(i,j))))(I)\ndef vec2HTML(vec:Vector) = Matrix(rows map (i => cols map(j => vec(i->j))))\nval truth = (Matrix(img.data.map(_.map(_ > 0.5)))(I)).data.zipWithIndex.flatMap(ri => ri._1.zipWithIndex.map(cj => (ri._2, cj._2) -> cj._1)).toMap\ndef accuracy(img: Image) = pixels.map(p => I(truth(p)==img(p))).sum\n// add noise\nval rand = new scala.util.Random(0)\nval nlevel = 0.1    \nval noisy = truth.map(pv => pv._1 -> (if(rand.nextDouble < nlevel) !pv._2 else pv._2)).toMap\n// display image\nCarousel(\"orig\" -> img, \"truth\" -> img2HTML(truth), \"noisy\" -> img2HTML(noisy))",
      "outputFormat" : "html",
      "extraFields" : { }
    }
  }, {
    "id" : 6,
    "compiler" : "section",
    "input" : {
      "code" : "model",
      "outputFormat" : "html",
      "extraFields" : { }
    }
  }, {
    "id" : 7,
    "compiler" : "markdown",
    "input" : {
      "code" : "## Model",
      "outputFormat" : "html",
      "extraFields" : { }
    }
  }, {
    "id" : 8,
    "compiler" : "wolfe",
    "input" : {
      "code" : "var l_w = 1.0\nvar g_w = 0.5\ndef local(x: Image)(y: Image) = sum(pixels){p => l_w * I(x(p) == y(p))}\ndef vert(y: Image) = \n  sum(0 until rows.length-1){i => sum(0 until cols.length){j => g_w * I(y(i, j) == y(i+1, j))}}\ndef horz(y: Image) = \n  sum(0 until rows.length){i => sum(0 until cols.length-1){j => g_w * I(y(i, j) == y(i, j+1))}}\ndef grid(x: Image)(y: Image) = local(x)(y) + vert(y) + horz(y)\ngrid(noisy)(truth)",
      "outputFormat" : "html",
      "extraFields" : { }
    }
  }, {
    "id" : 9,
    "compiler" : "section",
    "input" : {
      "code" : "inference",
      "outputFormat" : "html",
      "extraFields" : { }
    }
  }, {
    "id" : 10,
    "compiler" : "markdown",
    "input" : {
      "code" : "## Inference",
      "outputFormat" : "html",
      "extraFields" : { }
    }
  }, {
    "id" : 11,
    "compiler" : "wolfe",
    "input" : {
      "code" : "def images = maps(pixels, bools)\nval mpe = argmax(images) { grid(noisy) }\nimg2HTML(mpe)\naccuracy(truth)",
      "outputFormat" : "html",
      "extraFields" : { }
    }
  }, {
    "id" : 16,
    "compiler" : "wolfe",
    "input" : {
      "code" : "val globals = XY((-0.5 to 1.5 by 0.1).map(g => {\n    g_w = g;\n    g -> accuracy(argmax(images) { grid(noisy) })\n}), \"global\")\ng_w = 0.5\nval locals = XY((-0.5 to 1.5 by 0.1).map(l => {\n    l_w = l;\n    l -> accuracy(argmax(images) { grid(noisy) })\n}), \"local\")\nl_w = 1.0\nD3Plotter.lineplot(xyChart(Seq(globals, locals)))",
      "outputFormat" : "html",
      "extraFields" : { }
    }
  }, {
    "id" : 12,
    "compiler" : "wolfe",
    "input" : {
      "code" : "//l_w = 0.75\n//g_w = 0.75\ndef stats(y: Image) = sum(pixels) { p => oneHot(p, I(y(p))) }\nval mu = expect(images) { grid(noisy) } { stats }\nvec2HTML(mu)",
      "outputFormat" : "html",
      "extraFields" : { }
    }
  }, {
    "id" : 13,
    "compiler" : "wolfe",
    "input" : {
      "code" : "Carousel((-0.5 to 1.5 by 0.25).map(g => {\n    g_w = g;\n    val mu = expect(images) { grid(noisy) } { stats }\n    g.toString -> vec2HTML(mu)\n}):_*)",
      "outputFormat" : "html",
      "extraFields" : { }
    }
  }, {
    "id" : 14,
    "compiler" : "section",
    "input" : {
      "code" : "thanks",
      "outputFormat" : "html",
      "extraFields" : { }
    }
  }, {
    "id" : 15,
    "compiler" : "heading1",
    "input" : {
      "code" : "Thank you!",
      "outputFormat" : "html",
      "extraFields" : { }
    }
  } ],
  "config" : { }
}
