{
  "name" : "Statistical Relational Learning Using MLNs",
  "cells" : [ {
    "id" : 0,
    "compiler" : "wolfe",
    "input" : {
      "code" : "import org.sameersingh.htmlgen.D3jsConverter.Implicits._\nval random = new scala.util.Random()\n\ncase class World(smokes: Pred[Symbol], cancer: Pred[Symbol])\nimplicit def persons = List('Anna, 'Bob, 'Charlie, 'Dan)\ndef friends = Set(('Anna, 'Bob),('Bob, 'Dan)).flatMap(x => Seq(x,x.swap))\nGraph.fromPreds[Symbol](persons, (x,y) => friends(x -> y))\nfriends",
      "outputFormat" : "html",
      "extraFields" : { }
    }
  }, {
    "id" : 1,
    "compiler" : "wolfe",
    "input" : {
      "code" : "def worlds = all(World)\nCarousel.items(worlds.map(w => Graph.fromPreds[Symbol](persons, (x,y) => friends(x -> y),\n    groups=(a:Symbol)=> (if(w.smokes(a)) 2 else 0)+(if(w.cancer(a)) 1 else 0),\n    description=p=>s\"smokes: ${w.smokes(p)}\\ncancer: ${w.cancer(p)}\")).toSeq:_*)",
      "outputFormat" : "html",
      "extraFields" : { }
    }
  }, {
    "id" : 2,
    "compiler" : "wolfe",
    "input" : {
      "code" : "@OptimizeByInference(BeliefPropagation.sumProduct(10))\ndef mln(world: World) = {\n  import world._\n  sum(persons) { p => \n    -3.0 * I(cancer(p)) } +\n  sum(persons) { p => \n    2.0 * I(smokes(p) --> cancer(p)) } +\n  sum(persons) { p1 => sum(persons) { p2 => \n    4.0 * I(friends(p1, p2) --> (smokes(p1) == smokes(p2))) } }\n}\nmln(worlds.head)",
      "outputFormat" : "html",
      "extraFields" : { }
    }
  }, {
    "id" : 3,
    "compiler" : "wolfe",
    "input" : {
      "code" : "Carousel(worlds.map(w => (\"Score: \" + mln(w).toString) -> Graph.fromPreds[Symbol](persons, (x,y) => friends(x -> y), \n        groups=(a:Symbol)=> (if(w.smokes(a)) 2 else 0)+(if(w.cancer(a)) 1 else 0))):_*)",
      "outputFormat" : "html",
      "extraFields" : { }
    }
  }, {
    "id" : 4,
    "compiler" : "wolfe",
    "input" : {
      "code" : "def evidence(world: World) = true //world.smokes('Anna)\ndef query(world: World) = oneHot(world.cancer('Anna))\nval mu = expect(worlds where evidence) { mln } { query }\nml.wolfe.D3Implicits.barChart(mu)\nfactorGraphURL(FactorGraphBuffer)",
      "outputFormat" : "html",
      "extraFields" : { }
    }
  }, {
    "id" : 5,
    "compiler" : "wolfe",
    "input" : {
      "code" : "def cancerq(w: World) = sum(persons) { p => oneHot(p,I(w.cancer(p))) }\nval cancermu = expect(worlds where evidence) { mln } { cancerq }\ndef smokesq(w: World) = sum(persons) { p => oneHot(p,I(w.smokes(p))) }\nval smokesmu = expect(worlds where evidence) { mln } { smokesq }\nCarousel(\"Smokes\" -> Graph.fromPreds[Symbol](persons, (x,y) => friends(x->y), \n        values = p => smokesmu(p), description = p => smokesmu(p)),\n            \"Cancer\" -> Graph.fromPreds[Symbol](persons, (x,y) => friends(x->y), \n        values = p => cancermu(p), description = p => cancermu(p)))",
      "outputFormat" : "html",
      "extraFields" : { }
    }
  } ],
  "config" : { }
}
