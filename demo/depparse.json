{
  "name" : "Dependency Parsing",
  "cells" : [ {
    "id" : 0,
    "compiler" : "scala",
    "input" : {
      "sessionId" : null,
      "code" : "import DepParseExample._\nimplicit val index = new SimpleIndex()\nimplicit val params = BPParameters(2, BP.Schedule.synchronized)\n\nval maxLength = 10\nval maxFeats = 1000\n\n@domain case class Sentence(word: IndexedSeq[String], pos: IndexedSeq[String])\n\nval s1 = Sentence(Vector(\"ROOT\", \"a\", \"cat\", \"sat\", \"on\", \"the\", \"mat\"), Vector(\"ROOT\", \"DT\", \"NN\", \"VBD\", \"IN\", \"DT\", \"NN\"))\nval sentences = Seq(s1)\n\nimplicit val Thetas = Vectors(maxFeats)\nimplicit val Words = sentences.flatMap(_.word).distinct.toDom\nimplicit val Tags = sentences.flatMap(_.pos).distinct.toDom\nimplicit val Sentences = Sentence.Objects(Seqs(Words, 0, maxLength), Seqs(Tags, 0, maxLength))\nimplicit val Parses = Seqs(Seqs(Bools, 0, maxLength), 0, maxLength)\n\nval theta = zeros + weight('pos_00, 1.0, Tags.Const(\"NN\"), Tags.Const(\"DT\"), true)\n\ndef features(x: Sentences.Term, y: Parses.Term, head: IntTerm, mod: IntTerm) = \n  feature('pos_00, x.pos(head), x.pos(mod), y(mod)(head))\n\nfeatures(Sentences.Variable(\"x\"),Parses.Variable(\"y\"),Ints.Variable(\"h\"),Ints.Variable(\"m\"))",
      "extraFields" : {
        "aggregatedCells" : "[]"
      },
      "outputFormat" : "<div class=\"string-result\"><div id=\"termb2e8d877-e927-4ac4-a8d8-865a27528671\" class=\"term\">\n<svg width=\"960\" height=\"400\"><g transform=\"translate(120,40)\"><path class=\"link\" d=\"M250.5263157894737,100C250.5263157894737,125 232.63157894736844,125 232.63157894736844,150\"></path><path class=\"link\" d=\"M250.5263157894737,100C250.5263157894737,125 268.42105263157896,125 268.42105263157896,150\"></path><path class=\"link\" d=\"M268.42105263157896,50C268.42105263157896,75 250.5263157894737,75 250.5263157894737,100\"></path><path class=\"link\" d=\"M268.42105263157896,50C268.42105263157896,75 286.3157894736842,75 286.3157894736842,100\"></path><path class=\"link\" d=\"M143.1578947368421,100C143.1578947368421,125 143.1578947368421,125 143.1578947368421,150\"></path><path class=\"link\" d=\"M161.05263157894737,50C161.05263157894737,75 143.1578947368421,75 143.1578947368421,100\"></path><path class=\"link\" d=\"M161.05263157894737,50C161.05263157894737,75 178.94736842105263,75 178.94736842105263,100\"></path><path class=\"link\" d=\"M35.78947368421053,100C35.78947368421053,125 35.78947368421053,125 35.78947368421053,150\"></path><path class=\"link\" d=\"M53.684210526315795,50C53.684210526315795,75 35.78947368421053,75 35.78947368421053,100\"></path><path class=\"link\" d=\"M53.684210526315795,50C53.684210526315795,75 71.57894736842105,75 71.57894736842105,100\"></path><path class=\"link\" d=\"M178.94736842105263,0C178.94736842105263,25 53.684210526315795,25 53.684210526315795,50\"></path><path class=\"link\" d=\"M178.94736842105263,0C178.94736842105263,25 161.05263157894737,25 161.05263157894737,50\"></path><path class=\"link\" d=\"M178.94736842105263,0C178.94736842105263,25 268.42105263157896,25 268.42105263157896,50\"></path><path class=\"link\" d=\"M178.94736842105263,0C178.94736842105263,25 304.2105263157895,25 304.2105263157895,50\"></path><g class=\"node\" transform=\"translate(304.2105263157895,50)\"><circle r=\"10\"></circle><text y=\"18\" dy=\".35em\" text-anchor=\"middle\" style=\"fill-opacity: 1;\">1.0</text></g><g class=\"node\" transform=\"translate(286.3157894736842,100)\"><circle r=\"10\"></circle><text y=\"18\" dy=\".35em\" text-anchor=\"middle\" style=\"fill-opacity: 1;\">h</text></g><g class=\"node\" transform=\"translate(268.42105263157896,150)\"><circle r=\"10\"></circle><text y=\"18\" dy=\".35em\" text-anchor=\"middle\" style=\"fill-opacity: 1;\">m</text></g><g class=\"node\" transform=\"translate(232.63157894736844,150)\"><circle r=\"10\"></circle><text y=\"18\" dy=\".35em\" text-anchor=\"middle\" style=\"fill-opacity: 1;\">y</text></g><g class=\"node\" transform=\"translate(250.5263157894737,100)\"><circle r=\"10\"></circle><text y=\"-18\" dy=\".35em\" text-anchor=\"middle\" style=\"fill-opacity: 1;\">VarSeqApply</text></g><g class=\"node\" transform=\"translate(268.42105263157896,50)\"><circle r=\"10\"></circle><text y=\"-18\" dy=\".35em\" text-anchor=\"middle\" style=\"fill-opacity: 1;\">VarSeqApply</text></g><g class=\"node\" transform=\"translate(178.94736842105263,100)\"><circle r=\"10\"></circle><text y=\"18\" dy=\".35em\" text-anchor=\"middle\" style=\"fill-opacity: 1;\">m</text></g><g class=\"node\" transform=\"translate(143.1578947368421,150)\"><circle r=\"10\"></circle><text y=\"18\" dy=\".35em\" text-anchor=\"middle\" style=\"fill-opacity: 1;\">x</text></g><g class=\"node\" transform=\"translate(143.1578947368421,100)\"><circle r=\"10\"></circle><text y=\"-18\" dy=\".35em\" text-anchor=\"middle\" style=\"fill-opacity: 1;\">Field</text></g><g class=\"node\" transform=\"translate(161.05263157894737,50)\"><circle r=\"10\"></circle><text y=\"-18\" dy=\".35em\" text-anchor=\"middle\" style=\"fill-opacity: 1;\">VarSeqApply</text></g><g class=\"node\" transform=\"translate(71.57894736842105,100)\"><circle r=\"10\"></circle><text y=\"18\" dy=\".35em\" text-anchor=\"middle\" style=\"fill-opacity: 1;\">h</text></g><g class=\"node\" transform=\"translate(35.78947368421053,150)\"><circle r=\"10\"></circle><text y=\"18\" dy=\".35em\" text-anchor=\"middle\" style=\"fill-opacity: 1;\">x</text></g><g class=\"node\" transform=\"translate(35.78947368421053,100)\"><circle r=\"10\"></circle><text y=\"-18\" dy=\".35em\" text-anchor=\"middle\" style=\"fill-opacity: 1;\">Field</text></g><g class=\"node\" transform=\"translate(53.684210526315795,50)\"><circle r=\"10\"></circle><text y=\"-18\" dy=\".35em\" text-anchor=\"middle\" style=\"fill-opacity: 1;\">VarSeqApply</text></g><g class=\"node\" transform=\"translate(178.94736842105263,0)\"><circle r=\"10\"></circle><text y=\"-18\" dy=\".35em\" text-anchor=\"middle\" style=\"fill-opacity: 1;\">Feature</text></g></g></svg>\n</div>\n<script>\n\nvar treeData = [\n\n{\n  \"name\": \"Feature\",\n  \"parent\": \"null\",\n  \"children\": [\n{\n  \"name\": \"VarSeqApply\",\n  \"parent\": \"Feature\",\n  \"children\": [\n{\n  \"name\": \"Field\",\n  \"parent\": \"VarSeqApply\",\n  \"children\": [\n{\n  \"name\": \"x\",\n  \"parent\": \"Field\",\n  \"children\": []\n}\n             ]\n}\n             ,\n\n{\n  \"name\": \"h\",\n  \"parent\": \"VarSeqApply\",\n  \"children\": []\n}\n             ]\n}\n             ,\n\n{\n  \"name\": \"VarSeqApply\",\n  \"parent\": \"Feature\",\n  \"children\": [\n{\n  \"name\": \"Field\",\n  \"parent\": \"VarSeqApply\",\n  \"children\": [\n{\n  \"name\": \"x\",\n  \"parent\": \"Field\",\n  \"children\": []\n}\n             ]\n}\n             ,\n\n{\n  \"name\": \"m\",\n  \"parent\": \"VarSeqApply\",\n  \"children\": []\n}\n             ]\n}\n             ,\n\n{\n  \"name\": \"VarSeqApply\",\n  \"parent\": \"Feature\",\n  \"children\": [\n{\n  \"name\": \"VarSeqApply\",\n  \"parent\": \"VarSeqApply\",\n  \"children\": [\n{\n  \"name\": \"y\",\n  \"parent\": \"VarSeqApply\",\n  \"children\": []\n}\n             ,\n\n{\n  \"name\": \"m\",\n  \"parent\": \"VarSeqApply\",\n  \"children\": []\n}\n             ]\n}\n             ,\n\n{\n  \"name\": \"h\",\n  \"parent\": \"VarSeqApply\",\n  \"children\": []\n}\n             ]\n}\n             ,\n\n{\n  \"name\": \"1.0\",\n  \"parent\": \"Feature\",\n  \"children\": []\n}\n             ]\n}\n\n];\n\nvar depth = 4\n\n// ************** Generate the tree diagram\t *****************\nvar margin = {top: 40, right: 120, bottom: 20, left: 120},\n\twidth = 960 - margin.right - margin.left,\n\theight = depth * 100 - margin.top - margin.bottom;\n\nvar i = 0;\n\nvar tree = d3.layout.tree()\n\t.size([height, width]);\n\nvar diagonal = d3.svg.diagonal()\n\t.projection(function(d) { return [d.x, d.y]; });\n\nvar svg = d3.select(\"#termb2e8d877-e927-4ac4-a8d8-865a27528671 svg\")\n\t.attr(\"width\", width + margin.right + margin.left)\n\t.attr(\"height\", height + margin.top + margin.bottom)\n  .append(\"g\")\n\t.attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\nroot = treeData[0];\n\nupdate(root);\n\nfunction update(source) {\n\n  // Compute the new tree layout.\n  var nodes = tree.nodes(source).reverse(),\n\t links = tree.links(nodes);\n\n  // Normalize for fixed-depth.\n  nodes.forEach(function(d) { d.y = d.depth * 50; });\n\n  // Declare the nodes…\n  var node = svg.selectAll(\"g.node\")\n\t  .data(nodes, function(d) { return d.id || (d.id = ++i); });\n\n  // Enter the nodes.\n  var nodeEnter = node.enter().append(\"g\")\n\t  .attr(\"class\", \"node\")\n\t  .attr(\"transform\", function(d) {\n\t\t  return \"translate(\" + d.x + \",\" + d.y + \")\"; });\n\n  nodeEnter.append(\"circle\")\n\t  .attr(\"r\", 10);\n\n  nodeEnter.append(\"text\")\n\t  .attr(\"y\", function(d) {\n\t\t  return d.children || d._children ? -18 : 18; })\n\t  .attr(\"dy\", \".35em\")\n\t  .attr(\"text-anchor\", \"middle\")\n\t  .text(function(d) { return d.name; })\n\t  .style(\"fill-opacity\", 1);\n\n  // Declare the links…\n  var link = svg.selectAll(\"path.link\")\n\t  .data(links, function(d) { return d.target.id; });\n\n  // Enter the links.\n  link.enter().insert(\"path\", \"g\")\n\t  .attr(\"class\", \"link\")\n\t  .attr(\"d\", diagonal);\n\n}\n\n</script></div>"
    }
  }, {
    "id" : 1,
    "compiler" : "scala",
    "input" : {
      "sessionId" : null,
      "code" : "def linear(t: Thetas.Term, x: Sentences.Term, y: Parses.Term) = \n  sum(0 until x.word.length) { head =>\n    sum(1 until x.word.length) { mod =>\n      t dot features(x, y, head, mod)\n    }\n  }\n  \ndef model(t: Thetas.Term, x: Sentences.Term, y: Parses.Term) =\n  linear(t, x, y)\n\nval margs = marginals(Parses) { y => model(theta, s1.toConst, y) marginalsBy Marginalizer.sumProduct }\n\ntoMatrix(s1.word, margs.eval())",
      "extraFields" : {
        "aggregatedCells" : "[\"import DepParseExample._\\nimplicit val index = new SimpleIndex()\\nimplicit val params = BPParameters(2, BP.Schedule.synchronized)\\n\\nval maxLength = 10\\nval maxFeats = 1000\\n\\n@domain case class Sentence(word: IndexedSeq[String], pos: IndexedSeq[String])\\n\\nval s1 = Sentence(Vector(\\\"ROOT\\\", \\\"a\\\", \\\"cat\\\", \\\"sat\\\", \\\"on\\\", \\\"the\\\", \\\"mat\\\"), Vector(\\\"ROOT\\\", \\\"DT\\\", \\\"NN\\\", \\\"VBD\\\", \\\"IN\\\", \\\"DT\\\", \\\"NN\\\"))\\nval sentences = Seq(s1)\\n\\nimplicit val Thetas = Vectors(maxFeats)\\nimplicit val Words = sentences.flatMap(_.word).distinct.toDom\\nimplicit val Tags = sentences.flatMap(_.pos).distinct.toDom\\nimplicit val Sentences = Sentence.Objects(Seqs(Words, 0, maxLength), Seqs(Tags, 0, maxLength))\\nimplicit val Parses = Seqs(Seqs(Bools, 0, maxLength), 0, maxLength)\\n\\nval theta = zeros + weight('pos_00, 1.0, Tags.Const(\\\"NN\\\"), Tags.Const(\\\"DT\\\"), true)\\n\\ndef features(x: Sentences.Term, y: Parses.Term, head: IntTerm, mod: IntTerm) = \\n  feature('pos_00, x.pos(head), x.pos(mod), y(mod)(head))\\n\\nfeatures(Sentences.Variable(\\\"x\\\"),Parses.Variable(\\\"y\\\"),Ints.Variable(\\\"h\\\"),Ints.Variable(\\\"m\\\"))\"]"
      },
      "outputFormat" : "<div class=\"string-result\"><table class=\"matrix\">\n  <thead>\n  <tr class=\"matrixRow\">\n  <th></th>\n    <th class=\"rotate\"><div><span>ROOT</span></div></th>\n    <th class=\"rotate\"><div><span>a</span></div></th>\n    <th class=\"rotate\"><div><span>cat</span></div></th>\n    <th class=\"rotate\"><div><span>sat</span></div></th>\n    <th class=\"rotate\"><div><span>on</span></div></th>\n    <th class=\"rotate\"><div><span>the</span></div></th>\n    <th class=\"rotate\"><div><span>mat</span></div></th>\n  </tr>\n  </thead>\n  <tbody>\n  <tr class=\"matrixRow\">\n    <th><div><span>ROOT</span></div></th>\n    <td class=\"matrixCell\" style=\"opacity:0.500000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.500000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.500000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.500000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.500000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.500000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.500000\"></td>\n  </tr>\n  <tr class=\"matrixRow\">\n    <th><div><span>a</span></div></th>\n    <td class=\"matrixCell\" style=\"opacity:0.500000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.500000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.731059\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.500000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.500000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.500000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.731059\"></td>\n  </tr>\n  <tr class=\"matrixRow\">\n    <th><div><span>cat</span></div></th>\n    <td class=\"matrixCell\" style=\"opacity:0.500000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.500000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.500000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.500000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.500000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.500000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.500000\"></td>\n  </tr>\n  <tr class=\"matrixRow\">\n    <th><div><span>sat</span></div></th>\n    <td class=\"matrixCell\" style=\"opacity:0.500000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.500000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.500000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.500000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.500000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.500000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.500000\"></td>\n  </tr>\n  <tr class=\"matrixRow\">\n    <th><div><span>on</span></div></th>\n    <td class=\"matrixCell\" style=\"opacity:0.500000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.500000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.500000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.500000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.500000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.500000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.500000\"></td>\n  </tr>\n  <tr class=\"matrixRow\">\n    <th><div><span>the</span></div></th>\n    <td class=\"matrixCell\" style=\"opacity:0.500000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.500000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.731059\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.500000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.500000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.500000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.731059\"></td>\n  </tr>\n  <tr class=\"matrixRow\">\n    <th><div><span>mat</span></div></th>\n    <td class=\"matrixCell\" style=\"opacity:0.500000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.500000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.500000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.500000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.500000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.500000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.500000\"></td>\n  </tr>\n  </tbody>\n</table></div>"
    }
  }, {
    "id" : 2,
    "compiler" : "scala",
    "input" : {
      "sessionId" : null,
      "code" : "def model(t: Thetas.Term, x: Sentences.Term, y: Parses.Term) =\n  linear(t, x, y) subjectTo projectiveTree(y, x.word.length)\n\nval margs = marginals(Parses) { y => model(theta, s1.toConst, y) marginalsBy Marginalizer.sumProduct }\n\ntoMatrix(s1.word, margs.eval())",
      "extraFields" : {
        "aggregatedCells" : "[\"import DepParseExample._\\nimplicit val index = new SimpleIndex()\\nimplicit val params = BPParameters(2, BP.Schedule.synchronized)\\n\\nval maxLength = 10\\nval maxFeats = 1000\\n\\n@domain case class Sentence(word: IndexedSeq[String], pos: IndexedSeq[String])\\n\\nval s1 = Sentence(Vector(\\\"ROOT\\\", \\\"a\\\", \\\"cat\\\", \\\"sat\\\", \\\"on\\\", \\\"the\\\", \\\"mat\\\"), Vector(\\\"ROOT\\\", \\\"DT\\\", \\\"NN\\\", \\\"VBD\\\", \\\"IN\\\", \\\"DT\\\", \\\"NN\\\"))\\nval sentences = Seq(s1)\\n\\nimplicit val Thetas = Vectors(maxFeats)\\nimplicit val Words = sentences.flatMap(_.word).distinct.toDom\\nimplicit val Tags = sentences.flatMap(_.pos).distinct.toDom\\nimplicit val Sentences = Sentence.Objects(Seqs(Words, 0, maxLength), Seqs(Tags, 0, maxLength))\\nimplicit val Parses = Seqs(Seqs(Bools, 0, maxLength), 0, maxLength)\\n\\nval theta = zeros + weight('pos_00, 1.0, Tags.Const(\\\"NN\\\"), Tags.Const(\\\"DT\\\"), true)\\n\\ndef features(x: Sentences.Term, y: Parses.Term, head: IntTerm, mod: IntTerm) = \\n  feature('pos_00, x.pos(head), x.pos(mod), y(mod)(head))\\n\\nfeatures(Sentences.Variable(\\\"x\\\"),Parses.Variable(\\\"y\\\"),Ints.Variable(\\\"h\\\"),Ints.Variable(\\\"m\\\"))\",\"def linear(t: Thetas.Term, x: Sentences.Term, y: Parses.Term) = \\n  sum(0 until x.word.length) { head =>\\n    sum(1 until x.word.length) { mod =>\\n      t dot features(x, y, head, mod)\\n    }\\n  }\\n  \\ndef model(t: Thetas.Term, x: Sentences.Term, y: Parses.Term) =\\n  linear(t, x, y)\\n\\nval margs = marginals(Parses) { y => model(theta, s1.toConst, y) marginalsBy Marginalizer.sumProduct }\\n\\ntoMatrix(s1.word, margs.eval())\"]"
      },
      "outputFormat" : "<div class=\"string-result\"><table class=\"matrix\">\n  <thead>\n  <tr class=\"matrixRow\">\n  <th></th>\n    <th class=\"rotate\"><div><span>ROOT</span></div></th>\n    <th class=\"rotate\"><div><span>a</span></div></th>\n    <th class=\"rotate\"><div><span>cat</span></div></th>\n    <th class=\"rotate\"><div><span>sat</span></div></th>\n    <th class=\"rotate\"><div><span>on</span></div></th>\n    <th class=\"rotate\"><div><span>the</span></div></th>\n    <th class=\"rotate\"><div><span>mat</span></div></th>\n  </tr>\n  </thead>\n  <tbody>\n  <tr class=\"matrixRow\">\n    <th><div><span>ROOT</span></div></th>\n    <td class=\"matrixCell\" style=\"opacity:0.000000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.000000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.000000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.000000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.000000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.000000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.000000\"></td>\n  </tr>\n  <tr class=\"matrixRow\">\n    <th><div><span>a</span></div></th>\n    <td class=\"matrixCell\" style=\"opacity:0.212290\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.000000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.334262\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.045503\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.038242\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.050137\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.319566\"></td>\n  </tr>\n  <tr class=\"matrixRow\">\n    <th><div><span>cat</span></div></th>\n    <td class=\"matrixCell\" style=\"opacity:0.134376\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.292576\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.000000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.207688\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.093978\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.090143\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.181238\"></td>\n  </tr>\n  <tr class=\"matrixRow\">\n    <th><div><span>sat</span></div></th>\n    <td class=\"matrixCell\" style=\"opacity:0.040024\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.107940\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.317468\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.000000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.270024\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.142664\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.121881\"></td>\n  </tr>\n  <tr class=\"matrixRow\">\n    <th><div><span>on</span></div></th>\n    <td class=\"matrixCell\" style=\"opacity:0.036380\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.084887\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.138465\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.258537\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.000000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.320894\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.160837\"></td>\n  </tr>\n  <tr class=\"matrixRow\">\n    <th><div><span>the</span></div></th>\n    <td class=\"matrixCell\" style=\"opacity:0.033988\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.063621\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.150448\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.057974\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.129501\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.000000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.564468\"></td>\n  </tr>\n  <tr class=\"matrixRow\">\n    <th><div><span>mat</span></div></th>\n    <td class=\"matrixCell\" style=\"opacity:0.542942\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.117562\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.104698\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.057016\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.070238\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.107544\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.000000\"></td>\n  </tr>\n  </tbody>\n</table></div>"
    }
  } ],
  "config" : { }
}
