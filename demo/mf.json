{
  "name" : "Relation Extraction with Matrix Factorization",
  "cells" : [ {
    "id" : 0,
    "compiler" : "scala",
    "input" : {
      "sessionId" : null,
      "code" : "implicit def entities = List('Cambridge, 'UCL, 'Harvard, 'Petrie, 'Ferguson, 'Andrew, 'Trevelyan)\ndef employeeAt = Set('Petrie -> 'UCL)\nGraph.fromPreds[Symbol](entities, (x,y) => employeeAt(x -> y))",
      "extraFields" : {
        "aggregatedCells" : "[]"
      },
      "outputFormat" : "<div class=\"string-result\"><div id=\"graphDivebe14f48-bf8e-4b64-87d7-c659e2dcccc9\"><svg width=\"750\" height=\"450\"><g><rect width=\"750\" height=\"450\" style=\"opacity: 0;\"></rect><line class=\"link\" opacity=\"1\" style=\"stroke-width: 3.16227766016838px; stroke: rgb(136, 136, 136);\" x1=\"215.61549727193258\" y1=\"274.6089547553224\" x2=\"320.17534806718476\" y2=\"243.68026352554196\"><title>\"\"</title></line><g class=\"node\" transform=\"translate(527.3767222910856,335.8847979663252)\"><circle r=\"10\" fill=\"#1f77b4\" opacity=\"1\" class=\"nodeGroup0\"><title>\"'Cambridge\"</title></circle><text x=\"15\" y=\"15\" font-family=\"Bree Serif\" font-size=\"1em\" text-anchor=\"beginning\" class=\"nodeLabel\">'Cambridge</text></g><g class=\"node\" transform=\"translate(215.61549727193258,274.6089547553224)\"><circle r=\"10\" fill=\"#1f77b4\" opacity=\"1\" class=\"nodeGroup0\"><title>\"'UCL\"</title></circle><text x=\"15\" y=\"15\" font-family=\"Bree Serif\" font-size=\"1em\" text-anchor=\"beginning\" class=\"nodeLabel\">'UCL</text></g><g class=\"node\" transform=\"translate(362.12382839614634,406.74855448862326)\"><circle r=\"10\" fill=\"#1f77b4\" opacity=\"1\" class=\"nodeGroup0\"><title>\"'Harvard\"</title></circle><text x=\"15\" y=\"15\" font-family=\"Bree Serif\" font-size=\"1em\" text-anchor=\"beginning\" class=\"nodeLabel\">'Harvard</text></g><g class=\"node\" transform=\"translate(320.17534806718476,243.68026352554196)\"><circle r=\"10\" fill=\"#1f77b4\" opacity=\"1\" class=\"nodeGroup0\"><title>\"'Petrie\"</title></circle><text x=\"15\" y=\"15\" font-family=\"Bree Serif\" font-size=\"1em\" text-anchor=\"beginning\" class=\"nodeLabel\">'Petrie</text></g><g class=\"node\" transform=\"translate(257.1611019808384,79.0405280254502)\"><circle r=\"10\" fill=\"#1f77b4\" opacity=\"1\" class=\"nodeGroup0\"><title>\"'Ferguson\"</title></circle><text x=\"15\" y=\"15\" font-family=\"Bree Serif\" font-size=\"1em\" text-anchor=\"beginning\" class=\"nodeLabel\">'Ferguson</text></g><g class=\"node\" transform=\"translate(422.0227723567653,61.675212109774264)\"><circle r=\"10\" fill=\"#1f77b4\" opacity=\"1\" class=\"nodeGroup0\"><title>\"'Andrew\"</title></circle><text x=\"15\" y=\"15\" font-family=\"Bree Serif\" font-size=\"1em\" text-anchor=\"beginning\" class=\"nodeLabel\">'Andrew</text></g><g class=\"node\" transform=\"translate(535.1450150581818,170.75693769509806)\"><circle r=\"10\" fill=\"#1f77b4\" opacity=\"1\" class=\"nodeGroup0\"><title>\"'Trevelyan\"</title></circle><text x=\"15\" y=\"15\" font-family=\"Bree Serif\" font-size=\"1em\" text-anchor=\"beginning\" class=\"nodeLabel\">'Trevelyan</text></g></g></svg></div>\n\n<script type=\"text/javascript\">\n drawGraph({\"nodes\":[{\"name\":\"'Cambridge\",\"description\":\"'Cambridge\",\"value\":1.0,\"group\":0},{\"name\":\"'UCL\",\"description\":\"'UCL\",\"value\":1.0,\"group\":0},{\"name\":\"'Harvard\",\"description\":\"'Harvard\",\"value\":1.0,\"group\":0},{\"name\":\"'Petrie\",\"description\":\"'Petrie\",\"value\":1.0,\"group\":0},{\"name\":\"'Ferguson\",\"description\":\"'Ferguson\",\"value\":1.0,\"group\":0},{\"name\":\"'Andrew\",\"description\":\"'Andrew\",\"value\":1.0,\"group\":0},{\"name\":\"'Trevelyan\",\"description\":\"'Trevelyan\",\"value\":1.0,\"group\":0}],\"edges\":[{\"source\":1,\"target\":3,\"description\":\"\",\"value\":1.0,\"group\":0}],\"directed\":\"false\"}, \"graphDivebe14f48-bf8e-4b64-87d7-c659e2dcccc9\");\n</script></div>"
    }
  }, {
    "id" : 1,
    "compiler" : "scala",
    "input" : {
      "sessionId" : null,
      "code" : "def is_historian_at = Set('Ferguson -> 'Harvard, 'Trevelyan -> 'Cambridge)\ndef is_professor_at = Set('Petrie -> 'UCL, 'Ferguson -> 'Harvard, 'Andrew -> 'Cambridge)\ndef museum_at = Set('Petrie -> 'UCL)\ndef teaches_history_at = Set('Andrew -> 'Cambridge)\nGraph.fromPreds[Symbol](entities, (x,y) => employeeAt(x -> y) || is_historian_at(x -> y) || is_professor_at(x -> y) || museum_at(x -> y) || teaches_history_at(x -> y))",
      "extraFields" : {
        "aggregatedCells" : "[\"implicit def entities = List('Cambridge, 'UCL, 'Harvard, 'Petrie, 'Ferguson, 'Andrew, 'Trevelyan)\\ndef employeeAt = Set('Petrie -> 'UCL)\\nGraph.fromPreds[Symbol](entities, (x,y) => employeeAt(x -> y))\"]"
      },
      "outputFormat" : "<div class=\"string-result\"><div id=\"graphDivbb1f214e-3285-40d0-8139-98477e87a73b\"><svg width=\"750\" height=\"450\"><g><rect width=\"750\" height=\"450\" style=\"opacity: 0;\"></rect><line class=\"link\" opacity=\"1\" style=\"stroke-width: 3.16227766016838px; stroke: rgb(136, 136, 136);\" x1=\"411.09600138105054\" y1=\"397.1061931903522\" x2=\"380.62573929200465\" y2=\"291.9896865939963\"><title>\"\"</title></line><line class=\"link\" opacity=\"1\" style=\"stroke-width: 3.16227766016838px; stroke: rgb(136, 136, 136);\" x1=\"411.09600138105054\" y1=\"397.1061931903522\" x2=\"507.88631755009\" y2=\"338.0118090668486\"><title>\"\"</title></line><line class=\"link\" opacity=\"1\" style=\"stroke-width: 3.16227766016838px; stroke: rgb(136, 136, 136);\" x1=\"214.50833927665846\" y1=\"274.65514159413954\" x2=\"225.40981698999192\" y2=\"165.8076431760915\"><title>\"\"</title></line><line class=\"link\" opacity=\"1\" style=\"stroke-width: 3.16227766016838px; stroke: rgb(136, 136, 136);\" x1=\"482.6143625319891\" y1=\"100.0152561938997\" x2=\"378.9251808248843\" y2=\"64.71523933600041\"><title>\"\"</title></line><g class=\"node\" transform=\"translate(411.09600138105054,397.1061931903522)\"><circle r=\"10\" fill=\"#1f77b4\" opacity=\"1\" class=\"nodeGroup0\"><title>\"'Cambridge\"</title></circle><text x=\"15\" y=\"15\" font-family=\"Bree Serif\" font-size=\"1em\" text-anchor=\"beginning\" class=\"nodeLabel\">'Cambridge</text></g><g class=\"node\" transform=\"translate(214.50833927665846,274.65514159413954)\"><circle r=\"10\" fill=\"#1f77b4\" opacity=\"1\" class=\"nodeGroup0\"><title>\"'UCL\"</title></circle><text x=\"15\" y=\"15\" font-family=\"Bree Serif\" font-size=\"1em\" text-anchor=\"beginning\" class=\"nodeLabel\">'UCL</text></g><g class=\"node\" transform=\"translate(482.6143625319891,100.0152561938997)\"><circle r=\"10\" fill=\"#1f77b4\" opacity=\"1\" class=\"nodeGroup0\"><title>\"'Harvard\"</title></circle><text x=\"15\" y=\"15\" font-family=\"Bree Serif\" font-size=\"1em\" text-anchor=\"beginning\" class=\"nodeLabel\">'Harvard</text></g><g class=\"node\" transform=\"translate(225.40981698999192,165.8076431760915)\"><circle r=\"10\" fill=\"#1f77b4\" opacity=\"1\" class=\"nodeGroup0\"><title>\"'Petrie\"</title></circle><text x=\"15\" y=\"15\" font-family=\"Bree Serif\" font-size=\"1em\" text-anchor=\"beginning\" class=\"nodeLabel\">'Petrie</text></g><g class=\"node\" transform=\"translate(378.9251808248843,64.71523933600041)\"><circle r=\"10\" fill=\"#1f77b4\" opacity=\"1\" class=\"nodeGroup0\"><title>\"'Ferguson\"</title></circle><text x=\"15\" y=\"15\" font-family=\"Bree Serif\" font-size=\"1em\" text-anchor=\"beginning\" class=\"nodeLabel\">'Ferguson</text></g><g class=\"node\" transform=\"translate(380.62573929200465,291.9896865939963)\"><circle r=\"10\" fill=\"#1f77b4\" opacity=\"1\" class=\"nodeGroup0\"><title>\"'Andrew\"</title></circle><text x=\"15\" y=\"15\" font-family=\"Bree Serif\" font-size=\"1em\" text-anchor=\"beginning\" class=\"nodeLabel\">'Andrew</text></g><g class=\"node\" transform=\"translate(507.88631755009,338.0118090668486)\"><circle r=\"10\" fill=\"#1f77b4\" opacity=\"1\" class=\"nodeGroup0\"><title>\"'Trevelyan\"</title></circle><text x=\"15\" y=\"15\" font-family=\"Bree Serif\" font-size=\"1em\" text-anchor=\"beginning\" class=\"nodeLabel\">'Trevelyan</text></g></g></svg></div>\n\n<script type=\"text/javascript\">\n drawGraph({\"nodes\":[{\"name\":\"'Cambridge\",\"description\":\"'Cambridge\",\"value\":1.0,\"group\":0},{\"name\":\"'UCL\",\"description\":\"'UCL\",\"value\":1.0,\"group\":0},{\"name\":\"'Harvard\",\"description\":\"'Harvard\",\"value\":1.0,\"group\":0},{\"name\":\"'Petrie\",\"description\":\"'Petrie\",\"value\":1.0,\"group\":0},{\"name\":\"'Ferguson\",\"description\":\"'Ferguson\",\"value\":1.0,\"group\":0},{\"name\":\"'Andrew\",\"description\":\"'Andrew\",\"value\":1.0,\"group\":0},{\"name\":\"'Trevelyan\",\"description\":\"'Trevelyan\",\"value\":1.0,\"group\":0}],\"edges\":[{\"source\":0,\"target\":5,\"description\":\"\",\"value\":1.0,\"group\":0},{\"source\":0,\"target\":6,\"description\":\"\",\"value\":1.0,\"group\":0},{\"source\":1,\"target\":3,\"description\":\"\",\"value\":1.0,\"group\":0},{\"source\":2,\"target\":4,\"description\":\"\",\"value\":1.0,\"group\":0}],\"directed\":\"false\"}, \"graphDivbb1f214e-3285-40d0-8139-98477e87a73b\");\n</script></div>"
    }
  }, {
    "id" : 2,
    "compiler" : "scala",
    "input" : {
      "sessionId" : null,
      "code" : "val rows = (employeeAt ++ is_historian_at ++ is_professor_at ++ museum_at ++ teaches_history_at).toList",
      "extraFields" : {
        "aggregatedCells" : "[\"implicit def entities = List('Cambridge, 'UCL, 'Harvard, 'Petrie, 'Ferguson, 'Andrew, 'Trevelyan)\\ndef employeeAt = Set('Petrie -> 'UCL)\\nGraph.fromPreds[Symbol](entities, (x,y) => employeeAt(x -> y))\",\"def is_historian_at = Set('Ferguson -> 'Harvard, 'Trevelyan -> 'Cambridge)\\ndef is_professor_at = Set('Petrie -> 'UCL, 'Ferguson -> 'Harvard, 'Andrew -> 'Cambridge)\\ndef museum_at = Set('Petrie -> 'UCL)\\ndef teaches_history_at = Set('Andrew -> 'Cambridge)\\nGraph.fromPreds[Symbol](entities, (x,y) => employeeAt(x -> y) || is_historian_at(x -> y) || is_professor_at(x -> y) || museum_at(x -> y) || teaches_history_at(x -> y))\"]"
      },
      "outputFormat" : "<div class=\"string-result\"><div class=\"asIterable List\"><span class=\"typeName\">List</span>\n<ol start=\"0\" class=\"fields\">\n  <li class=\"fieldValue\"><div class=\"asProduct Tuple2\"><span class=\"typeName\">Tuple2</span>\n    <ul class=\"fields\">\n      <li class=\"field\"><span class=\"fieldName\">_1</span> <span class=\"fieldValue\"><span class=\"asString String\">'Petrie</span></span></li>\n      <li class=\"field\"><span class=\"fieldName\">_2</span> <span class=\"fieldValue\"><span class=\"asString String\">'UCL</span></span></li>\n    </ul>\n</div></li>\n  <li class=\"fieldValue\"><div class=\"asProduct Tuple2\"><span class=\"typeName\">Tuple2</span>\n    <ul class=\"fields\">\n      <li class=\"field\"><span class=\"fieldName\">_1</span> <span class=\"fieldValue\"><span class=\"asString String\">'Ferguson</span></span></li>\n      <li class=\"field\"><span class=\"fieldName\">_2</span> <span class=\"fieldValue\"><span class=\"asString String\">'Harvard</span></span></li>\n    </ul>\n</div></li>\n  <li class=\"fieldValue\"><div class=\"asProduct Tuple2\"><span class=\"typeName\">Tuple2</span>\n    <ul class=\"fields\">\n      <li class=\"field\"><span class=\"fieldName\">_1</span> <span class=\"fieldValue\"><span class=\"asString String\">'Trevelyan</span></span></li>\n      <li class=\"field\"><span class=\"fieldName\">_2</span> <span class=\"fieldValue\"><span class=\"asString String\">'Cambridge</span></span></li>\n    </ul>\n</div></li>\n  <li class=\"fieldValue\"><div class=\"asProduct Tuple2\"><span class=\"typeName\">Tuple2</span>\n    <ul class=\"fields\">\n      <li class=\"field\"><span class=\"fieldName\">_1</span> <span class=\"fieldValue\"><span class=\"asString String\">'Andrew</span></span></li>\n      <li class=\"field\"><span class=\"fieldName\">_2</span> <span class=\"fieldValue\"><span class=\"asString String\">'Cambridge</span></span></li>\n    </ul>\n</div></li>\n</ol>\n</div></div>"
    }
  }, {
    "id" : 3,
    "compiler" : "scala",
    "input" : {
      "sessionId" : null,
      "code" : "val cols = List('is_historian_at, 'is_professor_at, 'museum_at, 'teaches_history_at, 'employeeAt)",
      "extraFields" : {
        "aggregatedCells" : "[\"implicit def entities = List('Cambridge, 'UCL, 'Harvard, 'Petrie, 'Ferguson, 'Andrew, 'Trevelyan)\\ndef employeeAt = Set('Petrie -> 'UCL)\\nGraph.fromPreds[Symbol](entities, (x,y) => employeeAt(x -> y))\",\"def is_historian_at = Set('Ferguson -> 'Harvard, 'Trevelyan -> 'Cambridge)\\ndef is_professor_at = Set('Petrie -> 'UCL, 'Ferguson -> 'Harvard, 'Andrew -> 'Cambridge)\\ndef museum_at = Set('Petrie -> 'UCL)\\ndef teaches_history_at = Set('Andrew -> 'Cambridge)\\nGraph.fromPreds[Symbol](entities, (x,y) => employeeAt(x -> y) || is_historian_at(x -> y) || is_professor_at(x -> y) || museum_at(x -> y) || teaches_history_at(x -> y))\",\"val rows = (employeeAt ++ is_historian_at ++ is_professor_at ++ museum_at ++ teaches_history_at).toList\"]"
      },
      "outputFormat" : "<div class=\"string-result\"><div class=\"asIterable List\"><span class=\"typeName\">List</span>\n<ol start=\"0\" class=\"fields\">\n  <li class=\"fieldValue\"><span class=\"asString String\">'is_historian_at</span></li>\n  <li class=\"fieldValue\"><span class=\"asString String\">'is_professor_at</span></li>\n  <li class=\"fieldValue\"><span class=\"asString String\">'museum_at</span></li>\n  <li class=\"fieldValue\"><span class=\"asString String\">'teaches_history_at</span></li>\n  <li class=\"fieldValue\"><span class=\"asString String\">'employeeAt</span></li>\n</ol>\n</div></div>"
    }
  }, {
    "id" : 4,
    "compiler" : "scala",
    "input" : {
      "sessionId" : null,
      "code" : "val pairToPairIx = rows.zipWithIndex.toMap\nval data = List(is_historian_at, is_professor_at, museum_at, teaches_history_at, employeeAt).map(_.map(pairToPairIx))",
      "extraFields" : {
        "aggregatedCells" : "[\"implicit def entities = List('Cambridge, 'UCL, 'Harvard, 'Petrie, 'Ferguson, 'Andrew, 'Trevelyan)\\ndef employeeAt = Set('Petrie -> 'UCL)\\nGraph.fromPreds[Symbol](entities, (x,y) => employeeAt(x -> y))\",\"def is_historian_at = Set('Ferguson -> 'Harvard, 'Trevelyan -> 'Cambridge)\\ndef is_professor_at = Set('Petrie -> 'UCL, 'Ferguson -> 'Harvard, 'Andrew -> 'Cambridge)\\ndef museum_at = Set('Petrie -> 'UCL)\\ndef teaches_history_at = Set('Andrew -> 'Cambridge)\\nGraph.fromPreds[Symbol](entities, (x,y) => employeeAt(x -> y) || is_historian_at(x -> y) || is_professor_at(x -> y) || museum_at(x -> y) || teaches_history_at(x -> y))\",\"val rows = (employeeAt ++ is_historian_at ++ is_professor_at ++ museum_at ++ teaches_history_at).toList\",\"val cols = List('is_historian_at, 'is_professor_at, 'museum_at, 'teaches_history_at, 'employeeAt)\"]"
      },
      "outputFormat" : "<div class=\"string-result\"><div class=\"asIterable List\"><span class=\"typeName\">List</span>\n<ol start=\"0\" class=\"fields\">\n  <li class=\"fieldValue\"><div class=\"asIterable Set\"><span class=\"typeName\">Set</span>\n    <ul start=\"0\" class=\"fields\">\n      <li class=\"fieldValue\"><span class=\"asString String\">1</span></li>\n      <li class=\"fieldValue\"><span class=\"asString String\">2</span></li>\n    </ul>\n</div></li>\n  <li class=\"fieldValue\"><div class=\"asIterable Set\"><span class=\"typeName\">Set</span>\n    <ul start=\"0\" class=\"fields\">\n      <li class=\"fieldValue\"><span class=\"asString String\">0</span></li>\n      <li class=\"fieldValue\"><span class=\"asString String\">1</span></li>\n      <li class=\"fieldValue\"><span class=\"asString String\">3</span></li>\n    </ul>\n</div></li>\n  <li class=\"fieldValue\"><div class=\"asIterable Set\"><span class=\"typeName\">Set</span>\n    <ul start=\"0\" class=\"fields\">\n      <li class=\"fieldValue\"><span class=\"asString String\">0</span></li>\n    </ul>\n</div></li>\n  <li class=\"fieldValue\"><div class=\"asIterable Set\"><span class=\"typeName\">Set</span>\n    <ul start=\"0\" class=\"fields\">\n      <li class=\"fieldValue\"><span class=\"asString String\">3</span></li>\n    </ul>\n</div></li>\n  <li class=\"fieldValue\"><div class=\"asIterable Set\"><span class=\"typeName\">Set</span>\n    <ul start=\"0\" class=\"fields\">\n      <li class=\"fieldValue\"><span class=\"asString String\">0</span></li>\n    </ul>\n</div></li>\n</ol>\n</div></div>"
    }
  }, {
    "id" : 5,
    "compiler" : "scala",
    "input" : {
      "sessionId" : null,
      "code" : "Matrix((0 until rows.length).map(row => (0 until cols.length).map(col => if (data(col).contains(row)) 1.0 else 0.0).toSeq).toSeq, rows.map(t => t._1+\",\"+t._2), cols.map(_.toString))",
      "extraFields" : {
        "aggregatedCells" : "[\"implicit def entities = List('Cambridge, 'UCL, 'Harvard, 'Petrie, 'Ferguson, 'Andrew, 'Trevelyan)\\ndef employeeAt = Set('Petrie -> 'UCL)\\nGraph.fromPreds[Symbol](entities, (x,y) => employeeAt(x -> y))\",\"def is_historian_at = Set('Ferguson -> 'Harvard, 'Trevelyan -> 'Cambridge)\\ndef is_professor_at = Set('Petrie -> 'UCL, 'Ferguson -> 'Harvard, 'Andrew -> 'Cambridge)\\ndef museum_at = Set('Petrie -> 'UCL)\\ndef teaches_history_at = Set('Andrew -> 'Cambridge)\\nGraph.fromPreds[Symbol](entities, (x,y) => employeeAt(x -> y) || is_historian_at(x -> y) || is_professor_at(x -> y) || museum_at(x -> y) || teaches_history_at(x -> y))\",\"val rows = (employeeAt ++ is_historian_at ++ is_professor_at ++ museum_at ++ teaches_history_at).toList\",\"val cols = List('is_historian_at, 'is_professor_at, 'museum_at, 'teaches_history_at, 'employeeAt)\",\"val pairToPairIx = rows.zipWithIndex.toMap\\nval data = List(is_historian_at, is_professor_at, museum_at, teaches_history_at, employeeAt).map(_.map(pairToPairIx))\"]"
      },
      "outputFormat" : "<div class=\"string-result\"><table class=\"matrix\">\n  <thead>\n  <tr class=\"matrixRow\">\n  <th></th>\n    <th class=\"rotate\"><div><span>'is_historian_at</span></div></th>\n    <th class=\"rotate\"><div><span>'is_professor_at</span></div></th>\n    <th class=\"rotate\"><div><span>'museum_at</span></div></th>\n    <th class=\"rotate\"><div><span>'teaches_history_at</span></div></th>\n    <th class=\"rotate\"><div><span>'employeeAt</span></div></th>\n  </tr>\n  </thead>\n  <tbody>\n  <tr class=\"matrixRow\">\n    <th><div><span>'Petrie,'UCL</span></div></th>\n    <td class=\"matrixCell\" style=\"opacity:0.000000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:1.000000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:1.000000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.000000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:1.000000\"></td>\n  </tr>\n  <tr class=\"matrixRow\">\n    <th><div><span>'Ferguson,'Harvard</span></div></th>\n    <td class=\"matrixCell\" style=\"opacity:1.000000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:1.000000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.000000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.000000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.000000\"></td>\n  </tr>\n  <tr class=\"matrixRow\">\n    <th><div><span>'Trevelyan,'Cambridge</span></div></th>\n    <td class=\"matrixCell\" style=\"opacity:1.000000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.000000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.000000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.000000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.000000\"></td>\n  </tr>\n  <tr class=\"matrixRow\">\n    <th><div><span>'Andrew,'Cambridge</span></div></th>\n    <td class=\"matrixCell\" style=\"opacity:0.000000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:1.000000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.000000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:1.000000\"></td>\n    <td class=\"matrixCell\" style=\"opacity:0.000000\"></td>\n  </tr>\n  </tbody>\n</table></div>"
    }
  }, {
    "id" : 6,
    "compiler" : "scala",
    "input" : {
      "sessionId" : null,
      "code" : "val k = 10\n\n//the domain of parameters\n@domain case class Theta(relations: IndexedSeq[Vect], pairs: IndexedSeq[Vect])\n\nimplicit val Thetas = Theta.Values(Seqs(Vectors(k), cols.size), Seqs(Vectors(k), rows.size))\n\n//the class of cells\n@domain case class Cell(s: Int, i: Int, j: Int)\n\n//the set of possible cells\nimplicit val Cells = Cell.Values(Ints(0 until rows.length), Ints(0 until entities.length), Ints(0 until entities.length))",
      "extraFields" : {
        "aggregatedCells" : "[\"implicit def entities = List('Cambridge, 'UCL, 'Harvard, 'Petrie, 'Ferguson, 'Andrew, 'Trevelyan)\\ndef employeeAt = Set('Petrie -> 'UCL)\\nGraph.fromPreds[Symbol](entities, (x,y) => employeeAt(x -> y))\",\"def is_historian_at = Set('Ferguson -> 'Harvard, 'Trevelyan -> 'Cambridge)\\ndef is_professor_at = Set('Petrie -> 'UCL, 'Ferguson -> 'Harvard, 'Andrew -> 'Cambridge)\\ndef museum_at = Set('Petrie -> 'UCL)\\ndef teaches_history_at = Set('Andrew -> 'Cambridge)\\nGraph.fromPreds[Symbol](entities, (x,y) => employeeAt(x -> y) || is_historian_at(x -> y) || is_professor_at(x -> y) || museum_at(x -> y) || teaches_history_at(x -> y))\",\"val rows = (employeeAt ++ is_historian_at ++ is_professor_at ++ museum_at ++ teaches_history_at).toList\",\"val cols = List('is_historian_at, 'is_professor_at, 'museum_at, 'teaches_history_at, 'employeeAt)\",\"val pairToPairIx = rows.zipWithIndex.toMap\\nval data = List(is_historian_at, is_professor_at, museum_at, teaches_history_at, employeeAt).map(_.map(pairToPairIx))\",\"Matrix((0 until rows.length).map(row => (0 until cols.length).map(col => if (data(col).contains(row)) 1.0 else 0.0).toSeq).toSeq, rows.map(t => t._1+\\\",\\\"+t._2), cols.map(_.toString))\"]"
      },
      "outputFormat" : "<div class=\"string-result\"><span class=\"label label-danger\">Error!</span>\n<pre class=\"error\"><console>:51: error: value Values is not a member of object Theta\n Note: implicit value Cells is not applicable here because it comes after the application point and it lacks an explicit result type\n       implicit val Thetas = Theta.Values(Seqs(Vectors(k), cols.size), Seqs(Vectors(k), rows.size))\n                                   ^\n<console>:57: error: value Values is not a member of object Cell\n Note: implicit value Cells is not applicable here because it comes after the application point and it lacks an explicit result type\n       implicit val Cells = Cell.Values(Ints(0 until rows.length), Ints(0 until entities.length), Ints(0 until entities.length))\n                                 ^\n</console></console></pre></div>"
    }
  } ],
  "config" : { }
}
