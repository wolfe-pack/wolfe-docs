{
  "name" : "Relation Extraction with Matrix Factorization",
  "cells" : [ {
    "id" : 0,
    "compiler" : "scala",
    "input" : {
      "sessionId" : null,
      "code" : "//all entities\nimplicit def entities = List('Cambridge, 'UCL, 'Harvard, 'Petrie, 'Ferguson, 'Andrew, 'Trevelyan)\n\n//a Freebase relation\ndef employeeAt = Set('Petrie -> 'UCL)\n\n//visualization of knowledge graph\nGraph.fromPreds[Symbol](entities, (x,y) => employeeAt(x -> y))",
      "extraFields" : {
        "aggregatedCells" : "[]"
      },
      "outputFormat" : "<div class=\"string-result\"><div id=\"graphDivc06f025a-4e5d-4428-8aae-50a5216771c8\"><svg width=\"750\" height=\"450\"><g><rect width=\"750\" height=\"450\" style=\"opacity: 0;\"></rect><line class=\"link\" opacity=\"1\" style=\"stroke-width: 3.16227766016838px; stroke: rgb(136, 136, 136);\" x1=\"342.0534621822364\" y1=\"209.27768833986764\" x2=\"240.79661615481763\" y2=\"253.47797338472174\"><title>\"\"</title></line><g class=\"node\" transform=\"translate(546.3327768668394,211.69672237117356)\"><circle r=\"10\" fill=\"#1f77b4\" opacity=\"1\" class=\"nodeGroup0\"><title>\"'Cambridge\"</title></circle><text x=\"15\" y=\"15\" font-family=\"Bree Serif\" font-size=\"1em\" text-anchor=\"beginning\" class=\"nodeLabel\">'Cambridge</text></g><g class=\"node\" transform=\"translate(342.0534621822364,209.27768833986764)\"><circle r=\"10\" fill=\"#1f77b4\" opacity=\"1\" class=\"nodeGroup0\"><title>\"'UCL\"</title></circle><text x=\"15\" y=\"15\" font-family=\"Bree Serif\" font-size=\"1em\" text-anchor=\"beginning\" class=\"nodeLabel\">'UCL</text></g><g class=\"node\" transform=\"translate(319.3626925718738,402.58663522716677)\"><circle r=\"10\" fill=\"#1f77b4\" opacity=\"1\" class=\"nodeGroup0\"><title>\"'Harvard\"</title></circle><text x=\"15\" y=\"15\" font-family=\"Bree Serif\" font-size=\"1em\" text-anchor=\"beginning\" class=\"nodeLabel\">'Harvard</text></g><g class=\"node\" transform=\"translate(240.79661615481763,253.47797338472174)\"><circle r=\"10\" fill=\"#1f77b4\" opacity=\"1\" class=\"nodeGroup0\"><title>\"'Petrie\"</title></circle><text x=\"15\" y=\"15\" font-family=\"Bree Serif\" font-size=\"1em\" text-anchor=\"beginning\" class=\"nodeLabel\">'Petrie</text></g><g class=\"node\" transform=\"translate(453.600935819169,60.68763774031115)\"><circle r=\"10\" fill=\"#1f77b4\" opacity=\"1\" class=\"nodeGroup0\"><title>\"'Ferguson\"</title></circle><text x=\"15\" y=\"15\" font-family=\"Bree Serif\" font-size=\"1em\" text-anchor=\"beginning\" class=\"nodeLabel\">'Ferguson</text></g><g class=\"node\" transform=\"translate(490.60579259035705,356.1130136720909)\"><circle r=\"10\" fill=\"#1f77b4\" opacity=\"1\" class=\"nodeGroup0\"><title>\"'Andrew\"</title></circle><text x=\"15\" y=\"15\" font-family=\"Bree Serif\" font-size=\"1em\" text-anchor=\"beginning\" class=\"nodeLabel\">'Andrew</text></g><g class=\"node\" transform=\"translate(240.28047146299176,80.6949410445061)\"><circle r=\"10\" fill=\"#1f77b4\" opacity=\"1\" class=\"nodeGroup0\"><title>\"'Trevelyan\"</title></circle><text x=\"15\" y=\"15\" font-family=\"Bree Serif\" font-size=\"1em\" text-anchor=\"beginning\" class=\"nodeLabel\">'Trevelyan</text></g></g></svg></div>\n\n<script type=\"text/javascript\">\n drawGraph({\"nodes\":[{\"name\":\"'Cambridge\",\"description\":\"'Cambridge\",\"value\":1.0,\"group\":0},{\"name\":\"'UCL\",\"description\":\"'UCL\",\"value\":1.0,\"group\":0},{\"name\":\"'Harvard\",\"description\":\"'Harvard\",\"value\":1.0,\"group\":0},{\"name\":\"'Petrie\",\"description\":\"'Petrie\",\"value\":1.0,\"group\":0},{\"name\":\"'Ferguson\",\"description\":\"'Ferguson\",\"value\":1.0,\"group\":0},{\"name\":\"'Andrew\",\"description\":\"'Andrew\",\"value\":1.0,\"group\":0},{\"name\":\"'Trevelyan\",\"description\":\"'Trevelyan\",\"value\":1.0,\"group\":0}],\"edges\":[{\"source\":1,\"target\":3,\"description\":\"\",\"value\":1.0,\"group\":0}],\"directed\":\"false\"}, \"graphDivc06f025a-4e5d-4428-8aae-50a5216771c8\");\n</script></div>"
    }
  }, {
    "id" : 1,
    "compiler" : "scala",
    "input" : {
      "sessionId" : null,
      "code" : "//some surface form relations\ndef is_historian_at = Set('Ferguson -> 'Harvard, 'Trevelyan -> 'Cambridge)\ndef is_professor_at = Set('Petrie -> 'UCL, 'Ferguson -> 'Harvard, 'Andrew -> 'Cambridge)\ndef museum_at = Set('Petrie -> 'UCL)\ndef teaches_history_at = Set('Andrew -> 'Cambridge)\n\n//visualization of knowledge graph and surface forms\nGraph.fromPreds[Symbol](entities, (x,y) => employeeAt(x -> y) || is_historian_at(x -> y) || is_professor_at(x -> y) || museum_at(x -> y) || teaches_history_at(x -> y))",
      "extraFields" : {
        "aggregatedCells" : "[\"//all entities\\nimplicit def entities = List('Cambridge, 'UCL, 'Harvard, 'Petrie, 'Ferguson, 'Andrew, 'Trevelyan)\\n\\n//a Freebase relation\\ndef employeeAt = Set('Petrie -> 'UCL)\\n\\n//visualization of knowledge graph\\nGraph.fromPreds[Symbol](entities, (x,y) => employeeAt(x -> y))\"]"
      },
      "outputFormat" : "<div class=\"string-result\"><div id=\"graphDiv5d4b1e4c-050c-4764-9b36-8f4aa413fc48\"><svg width=\"750\" height=\"450\"><g><rect width=\"750\" height=\"450\" style=\"opacity: 0;\"></rect><line class=\"link\" opacity=\"1\" style=\"stroke-width: 3.16227766016838px; stroke: rgb(136, 136, 136);\" x1=\"345.3885462237014\" y1=\"246.74381004760798\" x2=\"440.35728370529927\" y2=\"183.3892321972461\"><title>\"\"</title></line><line class=\"link\" opacity=\"1\" style=\"stroke-width: 3.16227766016838px; stroke: rgb(136, 136, 136);\" x1=\"345.3885462237014\" y1=\"246.74381004760798\" x2=\"250.6262614578957\" y2=\"304.8663450500179\"><title>\"\"</title></line><line class=\"link\" opacity=\"1\" style=\"stroke-width: 3.16227766016838px; stroke: rgb(136, 136, 136);\" x1=\"252.5383452737562\" y1=\"93.95549851803473\" x2=\"353.89342925145615\" y2=\"45.76288165861429\"><title>\"\"</title></line><line class=\"link\" opacity=\"1\" style=\"stroke-width: 3.16227766016838px; stroke: rgb(136, 136, 136);\" x1=\"446.18850426140074\" y1=\"391.48888171938506\" x2=\"530.7107451014144\" y2=\"317.56445226010277\"><title>\"\"</title></line><g class=\"node\" transform=\"translate(345.3885462237014,246.74381004760798)\"><circle r=\"10\" fill=\"#1f77b4\" opacity=\"1\" class=\"nodeGroup0\"><title>\"'Cambridge\"</title></circle><text x=\"15\" y=\"15\" font-family=\"Bree Serif\" font-size=\"1em\" text-anchor=\"beginning\" class=\"nodeLabel\">'Cambridge</text></g><g class=\"node\" transform=\"translate(252.5383452737562,93.95549851803473)\"><circle r=\"10\" fill=\"#1f77b4\" opacity=\"1\" class=\"nodeGroup0\"><title>\"'UCL\"</title></circle><text x=\"15\" y=\"15\" font-family=\"Bree Serif\" font-size=\"1em\" text-anchor=\"beginning\" class=\"nodeLabel\">'UCL</text></g><g class=\"node\" transform=\"translate(446.18850426140074,391.48888171938506)\"><circle r=\"10\" fill=\"#1f77b4\" opacity=\"1\" class=\"nodeGroup0\"><title>\"'Harvard\"</title></circle><text x=\"15\" y=\"15\" font-family=\"Bree Serif\" font-size=\"1em\" text-anchor=\"beginning\" class=\"nodeLabel\">'Harvard</text></g><g class=\"node\" transform=\"translate(353.89342925145615,45.76288165861429)\"><circle r=\"10\" fill=\"#1f77b4\" opacity=\"1\" class=\"nodeGroup0\"><title>\"'Petrie\"</title></circle><text x=\"15\" y=\"15\" font-family=\"Bree Serif\" font-size=\"1em\" text-anchor=\"beginning\" class=\"nodeLabel\">'Petrie</text></g><g class=\"node\" transform=\"translate(530.7107451014144,317.56445226010277)\"><circle r=\"10\" fill=\"#1f77b4\" opacity=\"1\" class=\"nodeGroup0\"><title>\"'Ferguson\"</title></circle><text x=\"15\" y=\"15\" font-family=\"Bree Serif\" font-size=\"1em\" text-anchor=\"beginning\" class=\"nodeLabel\">'Ferguson</text></g><g class=\"node\" transform=\"translate(440.35728370529927,183.3892321972461)\"><circle r=\"10\" fill=\"#1f77b4\" opacity=\"1\" class=\"nodeGroup0\"><title>\"'Andrew\"</title></circle><text x=\"15\" y=\"15\" font-family=\"Bree Serif\" font-size=\"1em\" text-anchor=\"beginning\" class=\"nodeLabel\">'Andrew</text></g><g class=\"node\" transform=\"translate(250.6262614578957,304.8663450500179)\"><circle r=\"10\" fill=\"#1f77b4\" opacity=\"1\" class=\"nodeGroup0\"><title>\"'Trevelyan\"</title></circle><text x=\"15\" y=\"15\" font-family=\"Bree Serif\" font-size=\"1em\" text-anchor=\"beginning\" class=\"nodeLabel\">'Trevelyan</text></g></g></svg></div>\n\n<script type=\"text/javascript\">\n drawGraph({\"nodes\":[{\"name\":\"'Cambridge\",\"description\":\"'Cambridge\",\"value\":1.0,\"group\":0},{\"name\":\"'UCL\",\"description\":\"'UCL\",\"value\":1.0,\"group\":0},{\"name\":\"'Harvard\",\"description\":\"'Harvard\",\"value\":1.0,\"group\":0},{\"name\":\"'Petrie\",\"description\":\"'Petrie\",\"value\":1.0,\"group\":0},{\"name\":\"'Ferguson\",\"description\":\"'Ferguson\",\"value\":1.0,\"group\":0},{\"name\":\"'Andrew\",\"description\":\"'Andrew\",\"value\":1.0,\"group\":0},{\"name\":\"'Trevelyan\",\"description\":\"'Trevelyan\",\"value\":1.0,\"group\":0}],\"edges\":[{\"source\":0,\"target\":5,\"description\":\"\",\"value\":1.0,\"group\":0},{\"source\":0,\"target\":6,\"description\":\"\",\"value\":1.0,\"group\":0},{\"source\":1,\"target\":3,\"description\":\"\",\"value\":1.0,\"group\":0},{\"source\":2,\"target\":4,\"description\":\"\",\"value\":1.0,\"group\":0}],\"directed\":\"false\"}, \"graphDiv5d4b1e4c-050c-4764-9b36-8f4aa413fc48\");\n</script></div>"
    }
  }, {
    "id" : 2,
    "compiler" : "scala",
    "input" : {
      "sessionId" : null,
      "code" : "//all entity-pairs that will become the rows of our data matrix\nval rows = (employeeAt ++ is_historian_at ++ is_professor_at ++ museum_at ++ teaches_history_at).toList\n\n//convenience data structures\n//mapping from entities that appear as first arguments to their index\nval arg1s = rows.map(_._1).distinct.zipWithIndex.toMap\n\n//mapping from entities that appear as second arguments to their index\nval arg2s = rows.map(_._2).distinct.zipWithIndex.toMap\n\n//mapping from tuples to their argument indices\nval tupleToArgIndices = rows.map(t => (t._1 -> t._2) -> (arg1s(t._1) -> arg2s(t._2))).toMap\n\n//mapping from argument indices to entity-pair index\nval argsIxToPairIx = rows.map(tupleToArgIndices).zipWithIndex.toMap\nargsIxToPairIx.asString",
      "extraFields" : {
        "aggregatedCells" : "[\"//all entities\\nimplicit def entities = List('Cambridge, 'UCL, 'Harvard, 'Petrie, 'Ferguson, 'Andrew, 'Trevelyan)\\n\\n//a Freebase relation\\ndef employeeAt = Set('Petrie -> 'UCL)\\n\\n//visualization of knowledge graph\\nGraph.fromPreds[Symbol](entities, (x,y) => employeeAt(x -> y))\",\"//some surface form relations\\ndef is_historian_at = Set('Ferguson -> 'Harvard, 'Trevelyan -> 'Cambridge)\\ndef is_professor_at = Set('Petrie -> 'UCL, 'Ferguson -> 'Harvard, 'Andrew -> 'Cambridge)\\ndef museum_at = Set('Petrie -> 'UCL)\\ndef teaches_history_at = Set('Andrew -> 'Cambridge)\\n\\n//visualization of knowledge graph and surface forms\\nGraph.fromPreds[Symbol](entities, (x,y) => employeeAt(x -> y) || is_historian_at(x -> y) || is_professor_at(x -> y) || museum_at(x -> y) || teaches_history_at(x -> y))\"]"
      },
      "outputFormat" : "<div class=\"string-result\">Map((0,0) -&gt; 0, (1,1) -&gt; 1, (2,2) -&gt; 2, (3,2) -&gt; 3)</div>"
    }
  }, {
    "id" : 3,
    "compiler" : "scala",
    "input" : {
      "sessionId" : null,
      "code" : "//all relations (structured and unstructured) that will become the columns of our data matrix\nval cols = List('is_historian_at, 'is_professor_at, 'museum_at, 'teaches_history_at, 'employeeAt)",
      "extraFields" : {
        "aggregatedCells" : "[\"//all entities\\nimplicit def entities = List('Cambridge, 'UCL, 'Harvard, 'Petrie, 'Ferguson, 'Andrew, 'Trevelyan)\\n\\n//a Freebase relation\\ndef employeeAt = Set('Petrie -> 'UCL)\\n\\n//visualization of knowledge graph\\nGraph.fromPreds[Symbol](entities, (x,y) => employeeAt(x -> y))\",\"//some surface form relations\\ndef is_historian_at = Set('Ferguson -> 'Harvard, 'Trevelyan -> 'Cambridge)\\ndef is_professor_at = Set('Petrie -> 'UCL, 'Ferguson -> 'Harvard, 'Andrew -> 'Cambridge)\\ndef museum_at = Set('Petrie -> 'UCL)\\ndef teaches_history_at = Set('Andrew -> 'Cambridge)\\n\\n//visualization of knowledge graph and surface forms\\nGraph.fromPreds[Symbol](entities, (x,y) => employeeAt(x -> y) || is_historian_at(x -> y) || is_professor_at(x -> y) || museum_at(x -> y) || teaches_history_at(x -> y))\",\"//all entity-pairs that will become the rows of our data matrix\\nval rows = (employeeAt ++ is_historian_at ++ is_professor_at ++ museum_at ++ teaches_history_at).toList\\n\\n//convenience data structures\\n//mapping from entities that appear as first arguments to their index\\nval arg1s = rows.map(_._1).distinct.zipWithIndex.toMap\\n\\n//mapping from entities that appear as second arguments to their index\\nval arg2s = rows.map(_._2).distinct.zipWithIndex.toMap\\n\\n//mapping from tuples to their argument indices\\nval tupleToArgIndices = rows.map(t => (t._1 -> t._2) -> (arg1s(t._1) -> arg2s(t._2))).toMap\\n\\n//mapping from argument indices to entity-pair index\\nval argsIxToPairIx = rows.map(tupleToArgIndices).zipWithIndex.toMap\\nargsIxToPairIx.asString\"]"
      },
      "outputFormat" : "<div class=\"string-result\"><div class=\"asIterable List\"><span class=\"typeName\">List</span>\n<ol start=\"0\" class=\"fields\">\n  <li class=\"fieldValue\"><span class=\"asString String\">'is_historian_at</span></li>\n  <li class=\"fieldValue\"><span class=\"asString String\">'is_professor_at</span></li>\n  <li class=\"fieldValue\"><span class=\"asString String\">'museum_at</span></li>\n  <li class=\"fieldValue\"><span class=\"asString String\">'teaches_history_at</span></li>\n  <li class=\"fieldValue\"><span class=\"asString String\">'employeeAt</span></li>\n</ol>\n</div></div>"
    }
  }, {
    "id" : 4,
    "compiler" : "scala",
    "input" : {
      "sessionId" : null,
      "code" : "//mapping from entity-pairs to their unique index\nval pairToPairIx = rows.zipWithIndex.toMap\n\nval data = List(is_historian_at, is_professor_at, museum_at, teaches_history_at, employeeAt).map(_.map(pairToPairIx))\n\n//training tuples (s, ij)\nval tuples = data.zipWithIndex.flatMap(t => t._1.map(pair => t._2 -> pair))\n\n//training triples (s, i, j)\nval triples = tuples.map(t => t._1 -> tupleToArgIndices(rows(t._2))).map(t => (t._1, t._2._1, t._2._2))\ntriples.asString",
      "extraFields" : {
        "aggregatedCells" : "[\"//all entities\\nimplicit def entities = List('Cambridge, 'UCL, 'Harvard, 'Petrie, 'Ferguson, 'Andrew, 'Trevelyan)\\n\\n//a Freebase relation\\ndef employeeAt = Set('Petrie -> 'UCL)\\n\\n//visualization of knowledge graph\\nGraph.fromPreds[Symbol](entities, (x,y) => employeeAt(x -> y))\",\"//some surface form relations\\ndef is_historian_at = Set('Ferguson -> 'Harvard, 'Trevelyan -> 'Cambridge)\\ndef is_professor_at = Set('Petrie -> 'UCL, 'Ferguson -> 'Harvard, 'Andrew -> 'Cambridge)\\ndef museum_at = Set('Petrie -> 'UCL)\\ndef teaches_history_at = Set('Andrew -> 'Cambridge)\\n\\n//visualization of knowledge graph and surface forms\\nGraph.fromPreds[Symbol](entities, (x,y) => employeeAt(x -> y) || is_historian_at(x -> y) || is_professor_at(x -> y) || museum_at(x -> y) || teaches_history_at(x -> y))\",\"//all entity-pairs that will become the rows of our data matrix\\nval rows = (employeeAt ++ is_historian_at ++ is_professor_at ++ museum_at ++ teaches_history_at).toList\\n\\n//convenience data structures\\n//mapping from entities that appear as first arguments to their index\\nval arg1s = rows.map(_._1).distinct.zipWithIndex.toMap\\n\\n//mapping from entities that appear as second arguments to their index\\nval arg2s = rows.map(_._2).distinct.zipWithIndex.toMap\\n\\n//mapping from tuples to their argument indices\\nval tupleToArgIndices = rows.map(t => (t._1 -> t._2) -> (arg1s(t._1) -> arg2s(t._2))).toMap\\n\\n//mapping from argument indices to entity-pair index\\nval argsIxToPairIx = rows.map(tupleToArgIndices).zipWithIndex.toMap\\nargsIxToPairIx.asString\",\"//all relations (structured and unstructured) that will become the columns of our data matrix\\nval cols = List('is_historian_at, 'is_professor_at, 'museum_at, 'teaches_history_at, 'employeeAt)\"]"
      },
      "outputFormat" : "<div class=\"text-center\"><i class=\"fa fa-refresh fa-spin fa-lg\"></i></div>"
    }
  }, {
    "id" : 5,
    "compiler" : "scala",
    "input" : {
      "sessionId" : null,
      "code" : "//visualization of the sparse data matrix\nMatrix((0 until rows.length).map(row => (0 until cols.length).map(col => if (data(col).contains(row)) 1.0 else 0.0).toSeq).toSeq, rows.map(t => t._1+\",\"+t._2), cols.map(_.toString))",
      "extraFields" : {
        "aggregatedCells" : "[\"//all entities\\nimplicit def entities = List('Cambridge, 'UCL, 'Harvard, 'Petrie, 'Ferguson, 'Andrew, 'Trevelyan)\\n\\n//a Freebase relation\\ndef employeeAt = Set('Petrie -> 'UCL)\\n\\n//visualization of knowledge graph\\nGraph.fromPreds[Symbol](entities, (x,y) => employeeAt(x -> y))\",\"//some surface form relations\\ndef is_historian_at = Set('Ferguson -> 'Harvard, 'Trevelyan -> 'Cambridge)\\ndef is_professor_at = Set('Petrie -> 'UCL, 'Ferguson -> 'Harvard, 'Andrew -> 'Cambridge)\\ndef museum_at = Set('Petrie -> 'UCL)\\ndef teaches_history_at = Set('Andrew -> 'Cambridge)\\n\\n//visualization of knowledge graph and surface forms\\nGraph.fromPreds[Symbol](entities, (x,y) => employeeAt(x -> y) || is_historian_at(x -> y) || is_professor_at(x -> y) || museum_at(x -> y) || teaches_history_at(x -> y))\",\"//all entity-pairs that will become the rows of our data matrix\\nval rows = (employeeAt ++ is_historian_at ++ is_professor_at ++ museum_at ++ teaches_history_at).toList\\n\\n//convenience data structures\\n//mapping from entities that appear as first arguments to their index\\nval arg1s = rows.map(_._1).distinct.zipWithIndex.toMap\\n\\n//mapping from entities that appear as second arguments to their index\\nval arg2s = rows.map(_._2).distinct.zipWithIndex.toMap\\n\\n//mapping from tuples to their argument indices\\nval tupleToArgIndices = rows.map(t => (t._1 -> t._2) -> (arg1s(t._1) -> arg2s(t._2))).toMap\\n\\n//mapping from argument indices to entity-pair index\\nval argsIxToPairIx = rows.map(tupleToArgIndices).zipWithIndex.toMap\\nargsIxToPairIx.asString\",\"//all relations (structured and unstructured) that will become the columns of our data matrix\\nval cols = List('is_historian_at, 'is_professor_at, 'museum_at, 'teaches_history_at, 'employeeAt)\",\"//mapping from entity-pairs to their unique index\\nval pairToPairIx = rows.zipWithIndex.toMap\\n\\nval data = List(is_historian_at, is_professor_at, museum_at, teaches_history_at, employeeAt).map(_.map(pairToPairIx))\\n\\n//training tuples (s, ij)\\nval tuples = data.zipWithIndex.flatMap(t => t._1.map(pair => t._2 -> pair))\\n\\n//training triples (s, i, j)\\nval triples = tuples.map(t => t._1 -> tupleToArgIndices(rows(t._2))).map(t => (t._1, t._2._1, t._2._2))\\ntriples.asString\"]"
      },
      "outputFormat" : ""
    }
  }, {
    "id" : 6,
    "compiler" : "scala",
    "input" : {
      "sessionId" : null,
      "code" : "import ml.wolfe.ui.D3Term._\n//the dimension of latent representations\nval k = 2\n\n//regularization parameter\nval lambda = 0.05\n\nimplicit val random = new scala.util.Random(1l)\n\n//the domain of parameters\n@domain case class Theta(relations: IndexedSeq[Vect], pairs: IndexedSeq[Vect])\n\n//the set of possible parameters\nimplicit val Thetas = Theta.Values(Seqs(Vectors(k), cols.size), Seqs(Vectors(k), rows.size))\n\n//the class of cells\n@domain case class Cell(s: Int, i: Int, j: Int)\n\n//the set of possible cells\nimplicit val Cells = Cell.Values(Ints(0 until rows.length), Ints(0 until entities.length), Ints(0 until entities.length))\n\n//mapping cell argument indices to entity-pair index\ndef cellToPairIx(term: Cells.Term) = term.map(c => argsIxToPairIx(c.i -> c.j))\n\n//mapping training data (s, i, j) to values of the Cells domain\nval trainingData = triples.map(t => Cell(t._1, t._2, t._3)).toConst(Cells)\n\n//samples an unobserved cell for a given relation\ndef sampleNegCell(pos: Cell): Cell = {\n  def inner(attempts: Int): Cell = {\n    val row = random.nextInt(rows.size)\n    val (i,j) = tupleToArgIndices(rows(row))\n    val sample = Cell(pos.s, i, j)\n    if (attempts == 0) {\n      println(\"Couldn't sample a negative cell for \" + pos)\n      sample\n    } else if (trainingData.contains(sample)) {\n      inner(attempts - 1)\n    } else sample\n  }\n  inner(100)\n}\n\n//the score of one cell\ndef score(t: Thetas.Term)(cell: Cells.Term): DoubleTerm =\n  t.relations(cell.s) dot t.pairs(cellToPairIx(cell))\n\n//training loss \ndef loss(t: Thetas.Term) = {\n  //we sample a positive cell, and memoize the result\n  val pos = mem(trainingData.sampleShuffled)\n  //based on the memoized positive cell, we sample a negative cell      which needs to be memoized because it will reappear several times\n  val neg = mem(pos.map(sampleNegCell))\n  //regularization term\n  val l2 = sum(Seq(t.relations(pos.s), t.pairs(cellToPairIx(pos)), t.pairs(cellToPairIx(neg)))) { v => v.l2() * -lambda }\n  \n  log(sigm(score(t)(pos))) + log(sigm(-score(t)(neg))) + l2\n}\nlog(sigm(score(Thetas.Variable(\"theta\"))(Cells.Variable(\"pos\"))))",
      "extraFields" : {
        "cache" : "false",
        "aggregatedCells" : "[\"//all entities\\nimplicit def entities = List('Cambridge, 'UCL, 'Harvard, 'Petrie, 'Ferguson, 'Andrew, 'Trevelyan)\\n\\n//a Freebase relation\\ndef employeeAt = Set('Petrie -> 'UCL)\\n\\n//visualization of knowledge graph\\nGraph.fromPreds[Symbol](entities, (x,y) => employeeAt(x -> y))\",\"//some surface form relations\\ndef is_historian_at = Set('Ferguson -> 'Harvard, 'Trevelyan -> 'Cambridge)\\ndef is_professor_at = Set('Petrie -> 'UCL, 'Ferguson -> 'Harvard, 'Andrew -> 'Cambridge)\\ndef museum_at = Set('Petrie -> 'UCL)\\ndef teaches_history_at = Set('Andrew -> 'Cambridge)\\n\\n//visualization of knowledge graph and surface forms\\nGraph.fromPreds[Symbol](entities, (x,y) => employeeAt(x -> y) || is_historian_at(x -> y) || is_professor_at(x -> y) || museum_at(x -> y) || teaches_history_at(x -> y))\",\"//all entity-pairs that will become the rows of our data matrix\\nval rows = (employeeAt ++ is_historian_at ++ is_professor_at ++ museum_at ++ teaches_history_at).toList\\n\\n//convenience data structures\\n//mapping from entities that appear as first arguments to their index\\nval arg1s = rows.map(_._1).distinct.zipWithIndex.toMap\\n\\n//mapping from entities that appear as second arguments to their index\\nval arg2s = rows.map(_._2).distinct.zipWithIndex.toMap\\n\\n//mapping from tuples to their argument indices\\nval tupleToArgIndices = rows.map(t => (t._1 -> t._2) -> (arg1s(t._1) -> arg2s(t._2))).toMap\\n\\n//mapping from argument indices to entity-pair index\\nval argsIxToPairIx = rows.map(tupleToArgIndices).zipWithIndex.toMap\\nargsIxToPairIx.asString\",\"//all relations (structured and unstructured) that will become the columns of our data matrix\\nval cols = List('is_historian_at, 'is_professor_at, 'museum_at, 'teaches_history_at, 'employeeAt)\",\"//mapping from entity-pairs to their unique index\\nval pairToPairIx = rows.zipWithIndex.toMap\\n\\nval data = List(is_historian_at, is_professor_at, museum_at, teaches_history_at, employeeAt).map(_.map(pairToPairIx))\\n\\n//training tuples (s, ij)\\nval tuples = data.zipWithIndex.flatMap(t => t._1.map(pair => t._2 -> pair))\\n\\n//training triples (s, i, j)\\nval triples = tuples.map(t => t._1 -> tupleToArgIndices(rows(t._2))).map(t => (t._1, t._2._1, t._2._2))\\ntriples.asString\",\"//visualization of the sparse data matrix\\nMatrix((0 until rows.length).map(row => (0 until cols.length).map(col => if (data(col).contains(row)) 1.0 else 0.0).toSeq).toSeq, rows.map(t => t._1+\\\",\\\"+t._2), cols.map(_.toString))\"]"
      },
      "outputFormat" : ""
    }
  }, {
    "id" : 7,
    "compiler" : "scala",
    "input" : {
      "sessionId" : null,
      "code" : " //learning parameters\nval init = Settings(Thetas.createRandomSetting(random.nextGaussian() * 0.1))\nval adaParams = AdaGradParameters(epochs = 100, learningRate = 0.1, initParams = init, delta = 0.1)\n\n//do the training (argmax is a term, so it needs to be evaluated to do the optimization)\nval thetaStar = argmax(Thetas)(t => loss(t).argmaxBy(Argmaxer.adaGrad(adaParams))).eval()\n",
      "extraFields" : {
        "cache" : "false",
        "aggregatedCells" : "[\"//all entities\\nimplicit def entities = List('Cambridge, 'UCL, 'Harvard, 'Petrie, 'Ferguson, 'Andrew, 'Trevelyan)\\n\\n//a Freebase relation\\ndef employeeAt = Set('Petrie -> 'UCL)\\n\\n//visualization of knowledge graph\\nGraph.fromPreds[Symbol](entities, (x,y) => employeeAt(x -> y))\",\"//some surface form relations\\ndef is_historian_at = Set('Ferguson -> 'Harvard, 'Trevelyan -> 'Cambridge)\\ndef is_professor_at = Set('Petrie -> 'UCL, 'Ferguson -> 'Harvard, 'Andrew -> 'Cambridge)\\ndef museum_at = Set('Petrie -> 'UCL)\\ndef teaches_history_at = Set('Andrew -> 'Cambridge)\\n\\n//visualization of knowledge graph and surface forms\\nGraph.fromPreds[Symbol](entities, (x,y) => employeeAt(x -> y) || is_historian_at(x -> y) || is_professor_at(x -> y) || museum_at(x -> y) || teaches_history_at(x -> y))\",\"//all entity-pairs that will become the rows of our data matrix\\nval rows = (employeeAt ++ is_historian_at ++ is_professor_at ++ museum_at ++ teaches_history_at).toList\\n\\n//convenience data structures\\n//mapping from entities that appear as first arguments to their index\\nval arg1s = rows.map(_._1).distinct.zipWithIndex.toMap\\n\\n//mapping from entities that appear as second arguments to their index\\nval arg2s = rows.map(_._2).distinct.zipWithIndex.toMap\\n\\n//mapping from tuples to their argument indices\\nval tupleToArgIndices = rows.map(t => (t._1 -> t._2) -> (arg1s(t._1) -> arg2s(t._2))).toMap\\n\\n//mapping from argument indices to entity-pair index\\nval argsIxToPairIx = rows.map(tupleToArgIndices).zipWithIndex.toMap\\nargsIxToPairIx.asString\",\"//all relations (structured and unstructured) that will become the columns of our data matrix\\nval cols = List('is_historian_at, 'is_professor_at, 'museum_at, 'teaches_history_at, 'employeeAt)\",\"//mapping from entity-pairs to their unique index\\nval pairToPairIx = rows.zipWithIndex.toMap\\n\\nval data = List(is_historian_at, is_professor_at, museum_at, teaches_history_at, employeeAt).map(_.map(pairToPairIx))\\n\\n//training tuples (s, ij)\\nval tuples = data.zipWithIndex.flatMap(t => t._1.map(pair => t._2 -> pair))\\n\\n//training triples (s, i, j)\\nval triples = tuples.map(t => t._1 -> tupleToArgIndices(rows(t._2))).map(t => (t._1, t._2._1, t._2._2))\\ntriples.asString\",\"//visualization of the sparse data matrix\\nMatrix((0 until rows.length).map(row => (0 until cols.length).map(col => if (data(col).contains(row)) 1.0 else 0.0).toSeq).toSeq, rows.map(t => t._1+\\\",\\\"+t._2), cols.map(_.toString))\",\"import ml.wolfe.ui.D3Term._\\n//the dimension of latent representations\\nval k = 2\\n\\n//regularization parameter\\nval lambda = 0.05\\n\\nimplicit val random = new scala.util.Random(1l)\\n\\n//the domain of parameters\\n@domain case class Theta(relations: IndexedSeq[Vect], pairs: IndexedSeq[Vect])\\n\\n//the set of possible parameters\\nimplicit val Thetas = Theta.Values(Seqs(Vectors(k), cols.size), Seqs(Vectors(k), rows.size))\\n\\n//the class of cells\\n@domain case class Cell(s: Int, i: Int, j: Int)\\n\\n//the set of possible cells\\nimplicit val Cells = Cell.Values(Ints(0 until rows.length), Ints(0 until entities.length), Ints(0 until entities.length))\\n\\n//mapping cell argument indices to entity-pair index\\ndef cellToPairIx(term: Cells.Term) = term.map(c => argsIxToPairIx(c.i -> c.j))\\n\\n//mapping training data (s, i, j) to values of the Cells domain\\nval trainingData = triples.map(t => Cell(t._1, t._2, t._3)).toConst(Cells)\\n\\n//samples an unobserved cell for a given relation\\ndef sampleNegCell(pos: Cell): Cell = {\\n  def inner(attempts: Int): Cell = {\\n    val row = random.nextInt(rows.size)\\n    val (i,j) = tupleToArgIndices(rows(row))\\n    val sample = Cell(pos.s, i, j)\\n    if (attempts == 0) {\\n      println(\\\"Couldn't sample a negative cell for \\\" + pos)\\n      sample\\n    } else if (trainingData.contains(sample)) {\\n      inner(attempts - 1)\\n    } else sample\\n  }\\n  inner(100)\\n}\\n\\n//the score of one cell\\ndef score(t: Thetas.Term)(cell: Cells.Term): DoubleTerm =\\n  t.relations(cell.s) dot t.pairs(cellToPairIx(cell))\\n\\n//training loss \\ndef loss(t: Thetas.Term) = {\\n  //we sample a positive cell, and memoize the result\\n  val pos = mem(trainingData.sampleShuffled)\\n  //based on the memoized positive cell, we sample a negative cell      which needs to be memoized because it will reappear several times\\n  val neg = mem(pos.map(sampleNegCell))\\n  //regularization term\\n  val l2 = sum(Seq(t.relations(pos.s), t.pairs(cellToPairIx(pos)), t.pairs(cellToPairIx(neg)))) { v => v.l2() * -lambda }\\n  \\n  log(sigm(score(t)(pos))) + log(sigm(-score(t)(neg))) + l2\\n}\\nlog(sigm(score(Thetas.Variable(\\\"theta\\\"))(Cells.Variable(\\\"pos\\\"))))\"]"
      },
      "outputFormat" : ""
    }
  }, {
    "id" : 8,
    "compiler" : "scala",
    "input" : {
      "sessionId" : null,
      "code" : "val thetaLearned: Thetas.Term = Thetas.Const(thetaStar)\n\nval probFun = fun(Cells) { x => sigm(score(thetaLearned)(x)) }\n\ndef predict(s: Int, i: Int, j: Int): Double = probFun(Cell(s, i, j))\n\ndef predict(s: Int, ij: Int): Double = {\n    val (i,j) = tupleToArgIndices(rows(ij))\n    predict(s, i, j)\n}\n\nMatrix((0 until rows.length).map(row => (0 until cols.length).map(col => predict(col,row)).toSeq).toSeq, rows.map(t => t._1+\",\"+t._2), cols.map(_.toString))",
      "extraFields" : {
        "aggregatedCells" : "[\"//all entities\\nimplicit def entities = List('Cambridge, 'UCL, 'Harvard, 'Petrie, 'Ferguson, 'Andrew, 'Trevelyan)\\n\\n//a Freebase relation\\ndef employeeAt = Set('Petrie -> 'UCL)\\n\\n//visualization of knowledge graph\\nGraph.fromPreds[Symbol](entities, (x,y) => employeeAt(x -> y))\",\"//some surface form relations\\ndef is_historian_at = Set('Ferguson -> 'Harvard, 'Trevelyan -> 'Cambridge)\\ndef is_professor_at = Set('Petrie -> 'UCL, 'Ferguson -> 'Harvard, 'Andrew -> 'Cambridge)\\ndef museum_at = Set('Petrie -> 'UCL)\\ndef teaches_history_at = Set('Andrew -> 'Cambridge)\\n\\n//visualization of knowledge graph and surface forms\\nGraph.fromPreds[Symbol](entities, (x,y) => employeeAt(x -> y) || is_historian_at(x -> y) || is_professor_at(x -> y) || museum_at(x -> y) || teaches_history_at(x -> y))\",\"//all entity-pairs that will become the rows of our data matrix\\nval rows = (employeeAt ++ is_historian_at ++ is_professor_at ++ museum_at ++ teaches_history_at).toList\\n\\n//convenience data structures\\n//mapping from entities that appear as first arguments to their index\\nval arg1s = rows.map(_._1).distinct.zipWithIndex.toMap\\n\\n//mapping from entities that appear as second arguments to their index\\nval arg2s = rows.map(_._2).distinct.zipWithIndex.toMap\\n\\n//mapping from tuples to their argument indices\\nval tupleToArgIndices = rows.map(t => (t._1 -> t._2) -> (arg1s(t._1) -> arg2s(t._2))).toMap\\n\\n//mapping from argument indices to entity-pair index\\nval argsIxToPairIx = rows.map(tupleToArgIndices).zipWithIndex.toMap\\nargsIxToPairIx.asString\",\"//all relations (structured and unstructured) that will become the columns of our data matrix\\nval cols = List('is_historian_at, 'is_professor_at, 'museum_at, 'teaches_history_at, 'employeeAt)\",\"//mapping from entity-pairs to their unique index\\nval pairToPairIx = rows.zipWithIndex.toMap\\n\\nval data = List(is_historian_at, is_professor_at, museum_at, teaches_history_at, employeeAt).map(_.map(pairToPairIx))\\n\\n//training tuples (s, ij)\\nval tuples = data.zipWithIndex.flatMap(t => t._1.map(pair => t._2 -> pair))\\n\\n//training triples (s, i, j)\\nval triples = tuples.map(t => t._1 -> tupleToArgIndices(rows(t._2))).map(t => (t._1, t._2._1, t._2._2))\\ntriples.asString\",\"//visualization of the sparse data matrix\\nMatrix((0 until rows.length).map(row => (0 until cols.length).map(col => if (data(col).contains(row)) 1.0 else 0.0).toSeq).toSeq, rows.map(t => t._1+\\\",\\\"+t._2), cols.map(_.toString))\",\"import ml.wolfe.ui.D3Term._\\n//the dimension of latent representations\\nval k = 2\\n\\n//regularization parameter\\nval lambda = 0.05\\n\\nimplicit val random = new scala.util.Random(1l)\\n\\n//the domain of parameters\\n@domain case class Theta(relations: IndexedSeq[Vect], pairs: IndexedSeq[Vect])\\n\\n//the set of possible parameters\\nimplicit val Thetas = Theta.Values(Seqs(Vectors(k), cols.size), Seqs(Vectors(k), rows.size))\\n\\n//the class of cells\\n@domain case class Cell(s: Int, i: Int, j: Int)\\n\\n//the set of possible cells\\nimplicit val Cells = Cell.Values(Ints(0 until rows.length), Ints(0 until entities.length), Ints(0 until entities.length))\\n\\n//mapping cell argument indices to entity-pair index\\ndef cellToPairIx(term: Cells.Term) = term.map(c => argsIxToPairIx(c.i -> c.j))\\n\\n//mapping training data (s, i, j) to values of the Cells domain\\nval trainingData = triples.map(t => Cell(t._1, t._2, t._3)).toConst(Cells)\\n\\n//samples an unobserved cell for a given relation\\ndef sampleNegCell(pos: Cell): Cell = {\\n  def inner(attempts: Int): Cell = {\\n    val row = random.nextInt(rows.size)\\n    val (i,j) = tupleToArgIndices(rows(row))\\n    val sample = Cell(pos.s, i, j)\\n    if (attempts == 0) {\\n      println(\\\"Couldn't sample a negative cell for \\\" + pos)\\n      sample\\n    } else if (trainingData.contains(sample)) {\\n      inner(attempts - 1)\\n    } else sample\\n  }\\n  inner(100)\\n}\\n\\n//the score of one cell\\ndef score(t: Thetas.Term)(cell: Cells.Term): DoubleTerm =\\n  t.relations(cell.s) dot t.pairs(cellToPairIx(cell))\\n\\n//training loss \\ndef loss(t: Thetas.Term) = {\\n  //we sample a positive cell, and memoize the result\\n  val pos = mem(trainingData.sampleShuffled)\\n  //based on the memoized positive cell, we sample a negative cell      which needs to be memoized because it will reappear several times\\n  val neg = mem(pos.map(sampleNegCell))\\n  //regularization term\\n  val l2 = sum(Seq(t.relations(pos.s), t.pairs(cellToPairIx(pos)), t.pairs(cellToPairIx(neg)))) { v => v.l2() * -lambda }\\n  \\n  log(sigm(score(t)(pos))) + log(sigm(-score(t)(neg))) + l2\\n}\\nlog(sigm(score(Thetas.Variable(\\\"theta\\\"))(Cells.Variable(\\\"pos\\\"))))\",\" //learning parameters\\nval init = Settings(Thetas.createRandomSetting(random.nextGaussian() * 0.1))\\nval adaParams = AdaGradParameters(epochs = 100, learningRate = 0.1, initParams = init, delta = 0.1)\\n\\n//do the training (argmax is a term, so it needs to be evaluated to do the optimization)\\nval thetaStar = argmax(Thetas)(t => loss(t).argmaxBy(Argmaxer.adaGrad(adaParams))).eval()\\n\"]"
      },
      "outputFormat" : ""
    }
  }, {
    "id" : 9,
    "compiler" : "scala",
    "input" : {
      "sessionId" : null,
      "code" : "val entityPairEmbeddings = rows.zipWithIndex.map(t => (0, t._1.toString, thetaStar.pairs(t._2).asInstanceOf[Vect].asArray.toSeq)).toSeq\n\nval relationEmbeddings = cols.zipWithIndex.map(t => (1, t._1.toString, thetaStar.relations(t._2).asArray.toSeq)).toSeq\n\n//visualization of embeddings\nCustom.Vectors(entityPairEmbeddings ++ relationEmbeddings).norm",
      "extraFields" : {
        "aggregatedCells" : "[\"//all entities\\nimplicit def entities = List('Cambridge, 'UCL, 'Harvard, 'Petrie, 'Ferguson, 'Andrew, 'Trevelyan)\\n\\n//a Freebase relation\\ndef employeeAt = Set('Petrie -> 'UCL)\\n\\n//visualization of knowledge graph\\nGraph.fromPreds[Symbol](entities, (x,y) => employeeAt(x -> y))\",\"//some surface form relations\\ndef is_historian_at = Set('Ferguson -> 'Harvard, 'Trevelyan -> 'Cambridge)\\ndef is_professor_at = Set('Petrie -> 'UCL, 'Ferguson -> 'Harvard, 'Andrew -> 'Cambridge)\\ndef museum_at = Set('Petrie -> 'UCL)\\ndef teaches_history_at = Set('Andrew -> 'Cambridge)\\n\\n//visualization of knowledge graph and surface forms\\nGraph.fromPreds[Symbol](entities, (x,y) => employeeAt(x -> y) || is_historian_at(x -> y) || is_professor_at(x -> y) || museum_at(x -> y) || teaches_history_at(x -> y))\",\"//all entity-pairs that will become the rows of our data matrix\\nval rows = (employeeAt ++ is_historian_at ++ is_professor_at ++ museum_at ++ teaches_history_at).toList\\n\\n//convenience data structures\\n//mapping from entities that appear as first arguments to their index\\nval arg1s = rows.map(_._1).distinct.zipWithIndex.toMap\\n\\n//mapping from entities that appear as second arguments to their index\\nval arg2s = rows.map(_._2).distinct.zipWithIndex.toMap\\n\\n//mapping from tuples to their argument indices\\nval tupleToArgIndices = rows.map(t => (t._1 -> t._2) -> (arg1s(t._1) -> arg2s(t._2))).toMap\\n\\n//mapping from argument indices to entity-pair index\\nval argsIxToPairIx = rows.map(tupleToArgIndices).zipWithIndex.toMap\\nargsIxToPairIx.asString\",\"//all relations (structured and unstructured) that will become the columns of our data matrix\\nval cols = List('is_historian_at, 'is_professor_at, 'museum_at, 'teaches_history_at, 'employeeAt)\",\"//mapping from entity-pairs to their unique index\\nval pairToPairIx = rows.zipWithIndex.toMap\\n\\nval data = List(is_historian_at, is_professor_at, museum_at, teaches_history_at, employeeAt).map(_.map(pairToPairIx))\\n\\n//training tuples (s, ij)\\nval tuples = data.zipWithIndex.flatMap(t => t._1.map(pair => t._2 -> pair))\\n\\n//training triples (s, i, j)\\nval triples = tuples.map(t => t._1 -> tupleToArgIndices(rows(t._2))).map(t => (t._1, t._2._1, t._2._2))\\ntriples.asString\",\"//visualization of the sparse data matrix\\nMatrix((0 until rows.length).map(row => (0 until cols.length).map(col => if (data(col).contains(row)) 1.0 else 0.0).toSeq).toSeq, rows.map(t => t._1+\\\",\\\"+t._2), cols.map(_.toString))\",\"import ml.wolfe.ui.D3Term._\\n//the dimension of latent representations\\nval k = 2\\n\\n//regularization parameter\\nval lambda = 0.05\\n\\nimplicit val random = new scala.util.Random(1l)\\n\\n//the domain of parameters\\n@domain case class Theta(relations: IndexedSeq[Vect], pairs: IndexedSeq[Vect])\\n\\n//the set of possible parameters\\nimplicit val Thetas = Theta.Values(Seqs(Vectors(k), cols.size), Seqs(Vectors(k), rows.size))\\n\\n//the class of cells\\n@domain case class Cell(s: Int, i: Int, j: Int)\\n\\n//the set of possible cells\\nimplicit val Cells = Cell.Values(Ints(0 until rows.length), Ints(0 until entities.length), Ints(0 until entities.length))\\n\\n//mapping cell argument indices to entity-pair index\\ndef cellToPairIx(term: Cells.Term) = term.map(c => argsIxToPairIx(c.i -> c.j))\\n\\n//mapping training data (s, i, j) to values of the Cells domain\\nval trainingData = triples.map(t => Cell(t._1, t._2, t._3)).toConst(Cells)\\n\\n//samples an unobserved cell for a given relation\\ndef sampleNegCell(pos: Cell): Cell = {\\n  def inner(attempts: Int): Cell = {\\n    val row = random.nextInt(rows.size)\\n    val (i,j) = tupleToArgIndices(rows(row))\\n    val sample = Cell(pos.s, i, j)\\n    if (attempts == 0) {\\n      println(\\\"Couldn't sample a negative cell for \\\" + pos)\\n      sample\\n    } else if (trainingData.contains(sample)) {\\n      inner(attempts - 1)\\n    } else sample\\n  }\\n  inner(100)\\n}\\n\\n//the score of one cell\\ndef score(t: Thetas.Term)(cell: Cells.Term): DoubleTerm =\\n  t.relations(cell.s) dot t.pairs(cellToPairIx(cell))\\n\\n//training loss \\ndef loss(t: Thetas.Term) = {\\n  //we sample a positive cell, and memoize the result\\n  val pos = mem(trainingData.sampleShuffled)\\n  //based on the memoized positive cell, we sample a negative cell      which needs to be memoized because it will reappear several times\\n  val neg = mem(pos.map(sampleNegCell))\\n  //regularization term\\n  val l2 = sum(Seq(t.relations(pos.s), t.pairs(cellToPairIx(pos)), t.pairs(cellToPairIx(neg)))) { v => v.l2() * -lambda }\\n  \\n  log(sigm(score(t)(pos))) + log(sigm(-score(t)(neg))) + l2\\n}\\nlog(sigm(score(Thetas.Variable(\\\"theta\\\"))(Cells.Variable(\\\"pos\\\"))))\",\" //learning parameters\\nval init = Settings(Thetas.createRandomSetting(random.nextGaussian() * 0.1))\\nval adaParams = AdaGradParameters(epochs = 100, learningRate = 0.1, initParams = init, delta = 0.1)\\n\\n//do the training (argmax is a term, so it needs to be evaluated to do the optimization)\\nval thetaStar = argmax(Thetas)(t => loss(t).argmaxBy(Argmaxer.adaGrad(adaParams))).eval()\\n\",\"val thetaLearned: Thetas.Term = Thetas.Const(thetaStar)\\n\\nval probFun = fun(Cells) { x => sigm(score(thetaLearned)(x)) }\\n\\ndef predict(s: Int, i: Int, j: Int): Double = probFun(Cell(s, i, j))\\n\\ndef predict(s: Int, ij: Int): Double = {\\n    val (i,j) = tupleToArgIndices(rows(ij))\\n    predict(s, i, j)\\n}\\n\\nMatrix((0 until rows.length).map(row => (0 until cols.length).map(col => predict(col,row)).toSeq).toSeq, rows.map(t => t._1+\\\",\\\"+t._2), cols.map(_.toString))\"]"
      },
      "outputFormat" : ""
    }
  } ],
  "config" : { }
}
