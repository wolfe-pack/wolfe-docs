{
  "name" : "Domains",
  "cells" : [ {
    "id" : 0,
    "compiler" : "markdown",
    "input" : {
      "sessionId" : null,
      "code" : "Machine learning models are often represented as scalar functions \n$$f:\\mathcal{S}\\mapsto\\mathbb{R}$$ \nfrom a _domain_ (or a _sample space_ or _search space_) \\\\(\\mathcal{S}\\\\) to reals \\\\(\\mathbb{R}\\\\) that \nmeasure the score or probability of an element in the search space, or an empirical loss of an element in the space of model parameters. For example, we could talk about (word,part-of-speech-tag) pair, or something more structured \nsuch as a sequence of observations and labels, or a set of parameter vectors in a matrix factorization model. \n\nIn Wolfe you develop such scalar functions, and the\nfirst step is to define the collection of possible worlds \\\\(\\mathcal{S}\\\\). Wolfe uses\nscala [iterables](http://www.scala-lang.org/api/2.10.4/index.html#scala.collection.Iterable) \nas collections of possible worlds (we could restricted us \nto scala sets but they are cases where order and duplicate items are useful). \n\nWhile you can in theory use any expression that yields a scala iterable \nas your collection of possible worlds, Wolfe is optimized for a limited set we \ndescribe below. ",
      "extraFields" : { },
      "outputFormat" : null
    }
  }, {
    "id" : 1,
    "compiler" : "heading3",
    "input" : {
      "sessionId" : null,
      "code" : "Atomic Worlds",
      "extraFields" : { },
      "outputFormat" : null
    }
  }, {
    "id" : 2,
    "compiler" : "markdown",
    "input" : {
      "sessionId" : null,
      "code" : "Say we want to classify words as nouns or verbs. At the core of this task is an _atomic_ collection\nof labels, in this case \"Noun\" and \"Verb.\" In Wolfe you can use simple scala iterables to define\nsuch atomic collections, such as a [List](http://www.scala-lang.org/api/2.10.3/index.html#scala.collection.immutable.List). \n\n\n\n",
      "extraFields" : { },
      "outputFormat" : null
    }
  }, {
    "id" : 3,
    "compiler" : "wolfe",
    "input" : {
      "sessionId" : null,
      "code" : "List(\"Verb\",\"Noun\")",
      "extraFields" : {
        "aggregatedCells" : "[]"
      },
      "outputFormat" : null
    }
  }, {
    "id" : 4,
    "compiler" : "markdown",
    "input" : {
      "sessionId" : null,
      "code" : "Of course scala [Range](http://www.scala-lang.org/api/2.10.3/index.html#scala.collection.immutable.Range)\nobjects can serve as collections of possible worlds as well.",
      "extraFields" : { },
      "outputFormat" : null
    }
  }, {
    "id" : 5,
    "compiler" : "wolfe",
    "input" : {
      "sessionId" : null,
      "code" : "0 until 5",
      "extraFields" : {
        "aggregatedCells" : "[\"List(\\\"Verb\\\",\\\"Noun\\\")\"]"
      },
      "outputFormat" : null
    }
  }, {
    "id" : 6,
    "compiler" : "heading3",
    "input" : {
      "sessionId" : null,
      "code" : "Multivariate Worlds",
      "extraFields" : { },
      "outputFormat" : null
    }
  }, {
    "id" : 7,
    "compiler" : "markdown",
    "input" : {
      "sessionId" : null,
      "code" : "In practice possible worlds have several interacting components. For example, \nin the case of part-of-speech classification a token has a word and a part-of-speech,\nand the former helps to determine the latter. In Wolfe such worlds can be \ndescribed using Scala [case classes](http://www.codecommit.com/blog/scala/case-classes-are-cool). \n\nTo compactly describe a (factorized) collection of case class worlds, Wolfe provides the `all` method.\nThis method takes as first argument a case class name (or rather, the case class constructor)\nand as second argument an iterable of tuples ordered according to the order of \ncase class fields. In the example below we use the `x` operator to create such a\ncollection of tuples as cartesian product of possible words and possible labels.\n`all` then creates all possible `Token` objects corresponding to these tuples.\n\n\n",
      "extraFields" : { },
      "outputFormat" : null
    }
  }, {
    "id" : 8,
    "compiler" : "wolfe",
    "input" : {
      "sessionId" : null,
      "code" : "//case class Token(word:String, label:String)\n1.0",
      "extraFields" : {
        "aggregatedCells" : "[\"List(\\\"Verb\\\",\\\"Noun\\\")\",\"0 until 5\"]"
      },
      "outputFormat" : null
    }
  }, {
    "id" : 9,
    "compiler" : "markdown",
    "input" : {
      "sessionId" : null,
      "code" : "When case classes have many fields, and evolve over time, maintaining the correct order of the \ncartesian product can become tedious. Assuming each field has \na different scala type, we can avoid this problem by declaring the arguments of the\ncartesian product using scala implicits. Below you see the above example adapted\nto use the [Symbol](http://www.scala-lang.org/api/2.10.3/index.html#scala.Symbol) \nclass as label in order to make field types unique. \n\n\n",
      "extraFields" : { },
      "outputFormat" : null
    }
  }, {
    "id" : 10,
    "compiler" : "wolfe",
    "input" : {
      "sessionId" : null,
      "code" : "implicit val impWords = List(\"eat\",\"house\")\nimplicit val impLabels = List('Verb,'Noun)\n1.0",
      "extraFields" : {
        "aggregatedCells" : "[\"List(\\\"Verb\\\",\\\"Noun\\\")\",\"0 until 5\",\"//case class Token(word:String, label:String)\\n1.0\"]"
      },
      "outputFormat" : null
    }
  }, {
    "id" : 11,
    "compiler" : "heading3",
    "input" : {
      "sessionId" : null,
      "code" : "Sequences",
      "extraFields" : { },
      "outputFormat" : null
    }
  }, {
    "id" : 12,
    "compiler" : "markdown",
    "input" : {
      "sessionId" : null,
      "code" : "Many real world problems, such as tagging in NLP, or gene sequencing,\nconcern sequences of objects. In Wolfe `seqs(worlds,maxLength)` takes a collection\nof possible worlds `worlds` and generates all possible sequences over these worlds\nup to a maximum length `maxLength`.\n\n",
      "extraFields" : { },
      "outputFormat" : null
    }
  }, {
    "id" : 13,
    "compiler" : "wolfe",
    "input" : {
      "sessionId" : null,
      "code" : "val tags = List(\"Verb\",\"Noun\")\n1.0",
      "extraFields" : {
        "aggregatedCells" : "[\"List(\\\"Verb\\\",\\\"Noun\\\")\",\"0 until 5\",\"case class Token(word:String, label:String)\\n\",\"implicit val impWords = List(\\\"eat\\\",\\\"house\\\")\\nimplicit val impLabels = List('Verb,'Noun)\\n\"]"
      },
      "outputFormat" : null
    }
  }, {
    "id" : 14,
    "compiler" : "markdown",
    "input" : {
      "sessionId" : null,
      "code" : "The base collection of possible worlds can be any scala iterable. In particular, it can be\npossible worlds constructed using other operators.",
      "extraFields" : { },
      "outputFormat" : null
    }
  }, {
    "id" : 15,
    "compiler" : "wolfe",
    "input" : {
      "sessionId" : null,
      "code" : "//seqs(all(Token){List(\"eat\") x List(\"Verb\")}, 2)\n1.0",
      "extraFields" : {
        "aggregatedCells" : "[\"List(\\\"Verb\\\",\\\"Noun\\\")\",\"0 until 5\",\"case class Token(word:String, label:String)\\n\",\"implicit val impWords = List(\\\"eat\\\",\\\"house\\\")\\nimplicit val impLabels = List('Verb,'Noun)\\n\",\"val tags = List(\\\"Verb\\\",\\\"Noun\\\")\\n\"]"
      },
      "outputFormat" : null
    }
  }, {
    "id" : 16,
    "compiler" : "heading3",
    "input" : {
      "sessionId" : null,
      "code" : "Maps",
      "extraFields" : { },
      "outputFormat" : null
    }
  }, {
    "id" : 17,
    "compiler" : "markdown",
    "input" : {
      "sessionId" : null,
      "code" : "Wolfe supports the Scala [Map](http://www.scala-lang.org/api/2.10.4/index.html#scala.collection.immutable.Map) class to \nrepresent mappings from a domain to a range. Such mappings can be very useful, for example \nto represent relations and graphs, as shown in the example below. To generate \nall possible maps from a domain `dom` to a range `range` use the `maps(dom,range)`\nfunction.\n\n",
      "extraFields" : { },
      "outputFormat" : null
    }
  }, {
    "id" : 18,
    "compiler" : "wolfe",
    "input" : {
      "sessionId" : null,
      "code" : "val nodes = 0 until 2\nval bools = List(false,true)\n1.0",
      "extraFields" : {
        "aggregatedCells" : "[\"List(\\\"Verb\\\",\\\"Noun\\\")\",\"0 until 5\",\"case class Token(word:String, label:String)\\n\",\"implicit val impWords = List(\\\"eat\\\",\\\"house\\\")\\nimplicit val impLabels = List('Verb,'Noun)\\n\",\"val tags = List(\\\"Verb\\\",\\\"Noun\\\")\\n\",\"//seqs(all(Token){List(\\\"eat\\\") x List(\\\"Verb\\\")}, 2)\\n1.0\"]"
      },
      "outputFormat" : null
    }
  }, {
    "id" : 19,
    "compiler" : "heading3",
    "input" : {
      "sessionId" : null,
      "code" : "Predicates",
      "extraFields" : { },
      "outputFormat" : null
    }
  }, {
    "id" : 20,
    "compiler" : "markdown",
    "input" : {
      "sessionId" : null,
      "code" : "In Wolfe predicates are special cases of maps from some domain to {true,false}. \nAs they are frequently useful, Wolfe provide syntactic sugar to make their use easier.\n\n",
      "extraFields" : { },
      "outputFormat" : null
    }
  }, {
    "id" : 21,
    "compiler" : "wolfe",
    "input" : {
      "sessionId" : null,
      "code" : "case class Person(name:String)\ncase class World(smokes:Pred[Person])\nval persons = List(Person(\"Anna\"),Person(\"Bob\"))\n1.0",
      "extraFields" : {
        "aggregatedCells" : "[\"List(\\\"Verb\\\",\\\"Noun\\\")\",\"0 until 5\",\"case class Token(word:String, label:String)\\n\",\"implicit val impWords = List(\\\"eat\\\",\\\"house\\\")\\nimplicit val impLabels = List('Verb,'Noun)\\n\",\"val tags = List(\\\"Verb\\\",\\\"Noun\\\")\\n\",\"//seqs(all(Token){List(\\\"eat\\\") x List(\\\"Verb\\\")}, 2)\\n1.0\",\"val nodes = 0 until 2\\nval bools = List(false,true)\\n1.0\"]"
      },
      "outputFormat" : null
    }
  }, {
    "id" : 22,
    "compiler" : "heading3",
    "input" : {
      "sessionId" : null,
      "code" : "Infinite Collections",
      "extraFields" : { },
      "outputFormat" : null
    }
  }, {
    "id" : 23,
    "compiler" : "markdown",
    "input" : {
      "sessionId" : null,
      "code" : "Often we need infinite collections of possible worlds. For example,\na possible world may have real-valued attributes, and hence there are infinitely\nmany possibilities unless with discretize the attribute. Another example\nare string attributes such as the word of a token. Given that people constantly produce \nnew words, and typos, such string attributes can be considered infinite as well.\n\nIn Wolfe infinite collections can be constructed with the `infty[T]` \nmethod that returns an infinite collection of type `T`. Note that such\ncollections really only serve as placeholders, and one cannot iterate\nover the infinite collection. Because of this, Wolfe currently \n__requires infinite attributes to be observed__.\n\n",
      "extraFields" : { },
      "outputFormat" : null
    }
  }, {
    "id" : 24,
    "compiler" : "wolfe",
    "input" : {
      "sessionId" : null,
      "code" : "//todo: all(Token){infty[String] x List('Verb,'Noun)}\n1.0",
      "extraFields" : {
        "aggregatedCells" : "[\"List(\\\"Verb\\\",\\\"Noun\\\")\",\"0 until 5\",\"case class Token(word:String, label:String)\\n\",\"implicit val impWords = List(\\\"eat\\\",\\\"house\\\")\\nimplicit val impLabels = List('Verb,'Noun)\\n\",\"val tags = List(\\\"Verb\\\",\\\"Noun\\\")\\n\",\"//seqs(all(Token){List(\\\"eat\\\") x List(\\\"Verb\\\")}, 2)\\n1.0\",\"val nodes = 0 until 2\\nval bools = List(false,true)\\n1.0\",\"case class Person(name:String)\\ncase class World(smokes:Pred[Person])\\nval persons = List(Person(\\\"Anna\\\"),Person(\\\"Bob\\\"))\\n1.0\"]"
      },
      "outputFormat" : null
    }
  }, {
    "id" : 25,
    "compiler" : "heading3",
    "input" : {
      "sessionId" : null,
      "code" : "Built-in Collections",
      "extraFields" : { },
      "outputFormat" : null
    }
  }, {
    "id" : 26,
    "compiler" : "markdown",
    "input" : {
      "sessionId" : null,
      "code" : "Wolfe comes with a set of built in collections of possible worlds that can be used to \nconstruct more complex ones.",
      "extraFields" : { },
      "outputFormat" : null
    }
  }, {
    "id" : 27,
    "compiler" : "wolfe",
    "input" : {
      "sessionId" : null,
      "code" : "//val bools = List(false,true)\n1.0",
      "extraFields" : {
        "aggregatedCells" : "[\"List(\\\"Verb\\\",\\\"Noun\\\")\",\"0 until 5\",\"case class Token(word:String, label:String)\\n\",\"implicit val impWords = List(\\\"eat\\\",\\\"house\\\")\\nimplicit val impLabels = List('Verb,'Noun)\\n\",\"val tags = List(\\\"Verb\\\",\\\"Noun\\\")\\n\",\"//seqs(all(Token){List(\\\"eat\\\") x List(\\\"Verb\\\")}, 2)\\n1.0\",\"val nodes = 0 until 2\\nval bools = List(false,true)\\n1.0\",\"case class Person(name:String)\\ncase class World(smokes:Pred[Person])\\nval persons = List(Person(\\\"Anna\\\"),Person(\\\"Bob\\\"))\\n1.0\",\"//todo: all(Token){infty[String] x List('Verb,'Noun)}\\n1.0\"]"
      },
      "outputFormat" : null
    }
  } ],
  "config" : { }
}
