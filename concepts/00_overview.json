{
  "name" : "Overview",
  "cells" : [ {
    "id" : 0,
    "compiler" : "markdown",
    "input" : {
      "sessionId" : null,
      "code" : "This section aims at describing the core concepts and paradigms behind Wolfe,\nand how they can be leveraged using Wolfe code. \nNotice that the code in the following sections is interactive and can be edited \nand run by the reader.\n\nWolfe's main modelling tools are real-valued functions of the form\n$$\nf: \\mathcal{S} \\mapsto \\mathbb{R}\n$$\nwhere \\\\(\\mathcal{S}\\\\) is a search space and \\\\(f\\\\) assigns a probability, score or loss to each element in the search space. In wolfe users compose *symbolic* representations of both \\\\(\\mathcal{S}\\\\) and \\\\(f\\\\). In turn the wolfe interpreter can maximize \\\\(f\\\\) over \\\\(\\mathcal{S}\\\\), or sum out variables in \\\\(\\mathcal{S}\\\\), or sample from \\\\(f\\\\) etc. For example, a core primitive in Wolfe is the *argmax* operator:\n$$\n\\DeclareMathOperator{\\argmax}{arg max}\n\\argmax_{\\mathcal{S}} f(s)  \n$$\nwhich returns the argument in \\\\(\\mathcal{S}\\\\) that maximizes \\\\(f\\\\). Operations like *argmax*\nallow users to perform typical machine learning tasks such as parameter learning or MAP inference in graphical models, depending on the definition of \\\\(f\\\\) and \\\\(\\mathcal{S}\\\\).     \n\nIn the following sections we will show how to compose \\\\(\\mathcal{S}\\\\) and \\\\(f\\\\) in Wolfe, using the notions of domains and terms, respectively.   \n\nIn the following we will show how implement the essential building blocks \nof this picture: [possible worlds](/template/wolfe/wolfe-docs/concepts/01_worlds) \n\\\\(\\mathcal{S}\\\\), [constraints](/template/wolfe/wolfe-docs/concepts/02_constraints) on possible\nworlds, parameter [vectors](/template/wolfe/wolfe-docs/concepts/03_vectors) \n\\\\(\\mathbf{w}\\\\), [scalar functions](/template/wolfe/wolfe-docs/concepts/04_functions) and\n[operators](/).\n",
      "extraFields" : { },
      "outputFormat" : null
    }
  } ],
  "config" : { }
}
