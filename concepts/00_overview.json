{
  "name" : "Overview",
  "cells" : [ {
    "id" : 0,
    "compiler" : "markdown",
    "input" : {
      "code" : "This section aims at describing the core concepts and paradigms behind Wolfe,\nand how they can be leveraged using Wolfe code. \nNotice that the code in the following sections is interactive and can be edited \nand run by the reader.\n\nWolfe's main modelling tools are real-valued functions of the form\n$$\nf_\\mathbf{w}: \\mathcal{S} \\mapsto \\mathbb{R}\n$$\nwhere \\\\(\\mathcal{S}\\\\) is a set of possible worlds, \\\\(\\mathbf{w}\\\\) some\nparameter vector, and \\\\(f\\\\) assigns\na probability, score or loss to each world. \n\nFunctions \\\\(f\\\\) can represent factorized probability distributions\nsuch as Markov Networks and Bayesian Networks, scoring functions in structured\nprediction, first order models like Markov Logic Networks, \nand empirical loss functions to be minimized when training a model.\n\nWith given parameters \\\\(\\mathbf{w}\\\\) operating a model \\\\(f\\\\) amounts to\nconstraining the set of legal possible worlds to be consistent with some\nincoming observation about the world, and then performing some mathematical operation,\nmost notable maximization, summation or integration. For example, \\\\(f\\\\) may\nbe a joint probability distribution over sequences of words and sequences of\npart-of-speech tags, and we want to use this model to predict unseen\ntag sequences for sentences. Then\n$$\n\\DeclareMathOperator{\\argmax}{arg max}\n\\argmax_{\\underset{\\mathit{words}(s)=\\text{the cat sat}}{s \\in \\mathcal{S}}} f(s)  \n$$\nis the highest scoring sequence consistent with the sentence \"the cat sat.\"\nLikewise, we may to to calculate the probability of the first word being a \nnoun. This amounts to calculating\n\n$$\n\\sum_{\\underset{\\mathit{tags}(s)(1)=\\text{noun}}{s \\in \\mathcal{S}}} f(s)  \n$$\n\nWhen learning the parameters \\\\(\\mathbf{w}\\\\) of \\\\(f\\\\) we encounter\nreal valued loss functions \\\\(l(\\mathbf{w})\\\\) that measure the error (or\nnegative fit) of the model to the data. Learning here amounts to solving\n\n$$\n\\DeclareMathOperator{\\argmin}{arg min}\n\\argmin_{\\mathbf{w}\\in \\mathbb{R}^n} l(\\mathbf{w})  \n$$\n\nIn the following we will show how implement the essential building blocks \nof this picture: [possible worlds](/doc/wolfe-static//wolfe/docs/concepts/01_worlds) \n\\\\(\\mathcal{S}\\\\), [constraints](/doc/wolfe-static//wolfe/docs/concepts/02_constraints) on possible\nworlds, parameter [vectors](/doc/wolfe-static//wolfe/docs/concepts/03_vectors) \n\\\\(\\mathbf{w}\\\\), [scalar functions](/doc/wolfe-static//wolfe/docs/concepts/04_functions) and\n[operators](/).\n",
      "outputFormat" : "html",
      "extraFields" : null
    }
  } ]
}
