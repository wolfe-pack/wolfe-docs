{
  "name" : "MLNs",
  "cells" : [ {
    "id" : 0,
    "compiler" : "markdown",
    "input" : {
      "code" : "[Markov Logic Networks](http://en.wikipedia.org/wiki/Markov_logic_network) (MLNs) are \ncollections of _weighted_ first order logic formulae \\\\((f\\_i,w\\_i)\\\\), where\n\\\\(f\\_i\\\\) is the first order formula and \\\\(w\\_i \\in \\mathbb{R}\\\\) its weight,\nthat define log-linear\ndistributions over relational _possible worlds_. For a given set of predicates\nand constants, a possible world is an assignment from _atoms_ of these\npredicates, grounded using the constants, to {true,false} values.  \n\nThe formulae \\\\((f\\_i,w\\_i)\\\\) define the following distribution over\npossible worlds \\\\(\\mathbf{y}\\\\):\n$$\n\\newcommand{\\y}{\\mathbf{y}}\np(\\y) = \\frac{1}{Z}\\exp \\left( \\sum\\_{i}\\sum\\_{g \\in C\\_{f\\_i}} w\\_i \\left[\\y \\models f\\_i^g\\right] \\right)\n$$\nwhere \\\\(Z\\\\) is a normalization constant, \\\\(g \\in C\\_{f\\_i}\\\\) an\nassignment of constants to the free variables in \\\\(f\\_i\\\\), \\\\(f\\_i^g\\\\)\nthe formula \\\\(f\\_i\\\\) in which the free variables are replaced by constants \\\\(g\\\\)\nand \\\\(\\mathbf{y} \\models f\\_i^g\\\\) is true if the possible world \\\\(\\mathbf{y}\\\\)\nentails the formula on the right hand side.\n\nIn wolfe MLNs can be declaratively stated through the mathematical \ndescription above. The only (superficial) difference to an MLN definition\nof formulae is the explicit notation of sums. This doesn't change the\ndeclarative nature of the formulation, and one could argue that in this\nrepresentation the _semantics_ of the model are more visible. However,\nin the future wolfe will also provide syntactic sugar to make MLN \ndefinition look more like MLN files in [alchemy](http://alchemy.cs.washington.edu/). \n\nIn the following we will the traditional friends, smokes and cancer MLN taken from the \noriginal MLN paper. \n",
      "outputFormat" : "html",
      "extraFields" : null
    }
  }, {
    "id" : 1,
    "compiler" : "heading3",
    "input" : {
      "code" : "Possible Worlds",
      "outputFormat" : "html",
      "extraFields" : null
    }
  }, {
    "id" : 2,
    "compiler" : "markdown",
    "input" : {
      "code" : "We first implement MLN possible worlds. As before, in wolfe possible worlds can be any\ncase classes as well as collections such as sequences and maps. In particular, we can use\n`Map[T,Boolean]` as predicates, and for convenience in wolfe this type is defined \nas `type Pred[T]=Map[T,Boolean]`. A possible world is then simply a case class with \none field per predicate, as shown in the `World` case class.\n\nNote that we can use any class to represent constants of the domain, not just\n`Symbol`. For example, we could define predicates over the type\n`case class Person(first:String,last:String)`. ",
      "outputFormat" : "html",
      "extraFields" : null
    }
  }, {
    "id" : 3,
    "compiler" : "wolfe",
    "input" : {
      "code" : "case class World(smokes: Pred[Symbol], cancer: Pred[Symbol], \n                 friends: Pred[(Symbol, Symbol)])\nimplicit def persons = List('Anna, 'Bob)\ndef worlds = all(World)\nworlds.head",
      "outputFormat" : "string",
      "extraFields" : null
    }
  }, {
    "id" : 4,
    "compiler" : "heading3",
    "input" : {
      "code" : "Model",
      "outputFormat" : "html",
      "extraFields" : null
    }
  }, {
    "id" : 5,
    "compiler" : "markdown",
    "input" : {
      "code" : "To define the actual model we simply define the log-linear part of the mln distribution. \nAll wolfe operators either implicitly exponentiate and normalize this representation (e.g., \nthe `expect` operator), or can equivalently be applied to the log-linear form (e.g., `argmax`). \n\nNote how we use the Scala feature of importing the members of an objects \ninto scope using `import world._`. This allows us to write `smokes(p)` instead\nof `world.smokes(p)`. \n",
      "outputFormat" : "html",
      "extraFields" : null
    }
  }, {
    "id" : 6,
    "compiler" : "wolfe",
    "input" : {
      "code" : "def mln(world: World) = {\n  import world._\n  sum(persons) { p => \n    1.5 * I(smokes(p) --> cancer(p)) } +\n  sum(persons) { p1 => sum(persons) { p2 => \n    1.1 * I(friends(p1, p2) --> (smokes(p1) == smokes(p2))) } }\n}\nmln(worlds.head)",
      "outputFormat" : "string",
      "extraFields" : null
    }
  }, {
    "id" : 7,
    "compiler" : "heading3",
    "input" : {
      "code" : "Inference",
      "outputFormat" : "html",
      "extraFields" : null
    }
  }, {
    "id" : 8,
    "compiler" : "markdown",
    "input" : {
      "code" : "We are ready to calculate expectations/marginals under the model. In the following\nwe calculate the expectation of the `query` function under the model `mln`, \nconditioned on the `evidence`. The query returns a vector with a single active component\nindexed at `true` if `cancer('Bob)` is true, and at `false` otherwise.  The expectation\nof the component at index `true` is therefore the probability of `cancer('Bob)`. ",
      "outputFormat" : "html",
      "extraFields" : null
    }
  }, {
    "id" : 9,
    "compiler" : "wolfe",
    "input" : {
      "code" : "def evidence(world: World) = world.smokes('Anna) && world.friends('Anna, 'Bob)\ndef query(world: World) = oneHot(world.cancer('Bob))\nval mu = expect(worlds where evidence) { mln } { query }\nbarChart(mu)",
      "outputFormat" : "string",
      "extraFields" : null
    }
  } ]
}
